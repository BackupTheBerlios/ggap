#!/usr/bin/env python

import os
import sys

try:
  import psyco
  psyco.full()
except ImportError:
  pass

def make_section_name(gap_name):
    gap_name = gap_name[2:]
    if gap_name.startswith('Glade') or gap_name.startswith('Canvas') or \
        gap_name in ['GObject', 'GtkObject', 'MooTextView']:
        pass
    elif gap_name.startswith('Gtk') or gap_name.startswith('Gdk'):
        gap_name = gap_name[3:]
    else:
        print >> sys.stderr, "oops ", gap_name
    return gap_name
def printmsk(cls, fp):
    print >> fp, '%'*78
    print >> fp, '\\Section{%s}' % make_section_name(cls.gap_name)
    print >> fp, ''
    print >> fp, '\\Declaration{%s}' % cls.gap_name

    for f in cls.meth_docs:
        if f[1] == 'doc_stub':
            if f[0] == '__new__':
                print >> fp, '\\Declaration{%s}' % cls.gap_name[2:]
            else:
                def cap(s):
                    return s[0].title() + s[1:]
                print >> fp, '\\Declaration{%s}' % ''.join([cap(c) for c in f[0].replace('.', '_').split('_')])
        else:
            if f[1].name_unique:
                print >> fp, '\\Declaration{%s}' % (f[1].get_gap_name(),)
            else:
                gd = f[1].gd_file or 'types'
                print >> fp, '\\Declaration{%s}[%s]@{%s}' % (f[1].get_gap_name(), gd, cls.gap_name)

    print >> fp, ''

    for child in cls.children:
        printmsk(child, fp)

def write_msk(classes, fp):
    print >> fp, "%% This file is autogenerated\n"
    print >> fp, '%'*78
    print >> fp, '\\Chapter{Types}'
    print >> fp, ''
    for cls in classes:
        printmsk(cls, fp)

if __name__ == '__main__':
    sys.path.insert(0, os.path.join(os.path.dirname(sys.argv[0]), '..', 'gap'))
    import gtktypes
    if sys.argv[1:]:
        msk = open(sys.argv[1], "w")
    else:
        msk = sys.stdout
    write_msk(gtktypes.top_classes, msk)
