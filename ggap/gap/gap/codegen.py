#!/usr/bin/env python

import sys
import gtk
import gobject
import gtktypes

try:
  import psyco
  psyco.full()
except ImportError:
  pass

header = """\
#############################################################################
##
#W  types.%s                   ggap package                    Yevgen Muntyan
#W
#Y  Copyright (C) 2004-2007 by Yevgen Muntyan <muntyan@math.tamu.edu>
##
##  This program is free software; you can redistribute it and/or modify
##  it under the terms of the GNU General Public License as published by
##  the Free Software Foundation; either version 2 of the License, or
##  (at your option) any later version.
##
##  See COPYING file that comes with this distribution.
##
"""

def printcats(cls, fp):
    if cls.name not in ["GObject"]:
        print >> fp, cls.doc
        if cls.parents:
            print >> fp, 'DeclareCategory("%s", %s);' % (cls.gap_name,
                                                         ' and '.join([p.gap_name for p in cls.parents]))
        else:
            print >> fp, 'DeclareCategory("%s", %s);' % (cls.gap_name, 'IsObject')
        print >> fp, ''

    for child in cls.children:
        printcats(child, fp)

def printops(cls, fp):
    for f in cls.methods:
        print >> fp, f[1].get_doc()
        f[1].declare(fp)
        print >> fp, ''

    for child in cls.children:
        printops(child, fp)

def printfunc(func, fp):
    print >> fp, func.get_doc()
    func.declare(fp)
    print >> fp, ''

def printmeths(cls, fp):
    for f in cls.methods:
        f[1].install(fp)

    for child in cls.children:
        printmeths(child, fp)

def printfuncdef(func, fp):
    func.install(fp)

def printtypes(cls, fp):
    if cls.name not in ["GObject"]:
        print >> fp, '_GGAP_REGISTER_TYPE("%s", %s);' % (cls.name, cls.gap_name)

    for child in cls.children:
        printtypes(child, fp)

def printenums(mod, prefix, fp):
    ignoreenums = [gtk.PrivateFlags, gtk.ArgFlags, gtk.ButtonAction, gtk.CListDragPos, gtk.CellType,
                   gtk.CListDragPos, gtk.CTreeExpanderStyle, gtk.CTreeExpansionType, gtk.CTreeLineStyle,
                   gtk.CTreePos, gtk.DebugFlag, gtk.SubmenuDirection, gtk.SubmenuPlacement, gtk.MatchType,
                   gtk.PreviewType, gtk.SideType, gtk.PathPriorityType, gtk.AccelFlags, gtk.CellRendererState,
                   gtk.CurveType, gtk.DeleteType, gtk.DestDefaults, gtk.IMPreeditStyle, gtk.IMStatusStyle,
                   gtk.IconLookupFlags, gtk.IconThemeError, gtk.IconViewDropPosition, gtk.ImageType,
                   gtk.MenuDirectionType, gtk.MovementStep, gtk.NotebookTab, gtk.ObjectFlags, gtk.PathType,
                   gtk.RcFlags, gtk.RcTokenType, gtk.ResizeMode, gtk.StateType, gtk.TargetFlags, gtk.TextDirection,
                   gtk.TextWindowType, gtk.ToolbarChildType, gtk.ToolbarSpaceStyle, gtk.TreeModelFlags,
                   gtk.TreeViewDropPosition, gtk.UIManagerItemType, gtk.Visibility, gtk.WidgetHelpType]

    vals = []

    for w in dir(mod):
        m = getattr(mod, w)
        if (isinstance(m, gobject.GEnum) or isinstance(m, gobject.GFlags)) and \
            not type(m) in ignoreenums:
            vals.append([w, m])

    def cmp_vals(wm1, wm2):
        t1 = type(wm1[1])
        t2 = type(wm2[1])
        if t1 is t2:
            return cmp(wm1[1], wm2[1])
        else:
            return cmp(t1.__name__, t2.__name__)
    vals.sort(cmp_vals)

    for wm in vals:
        print >> fp, 'BindGlobal("%s", %s);' % (prefix + wm[0], int(wm[1]))

def write_gd(fp):
    print >> fp, header % ('gd',)
    print >> fp, "## This file is autogenerated\n"
    for cls in gtktypes.top_classes:
        printcats(cls, fp)
    print >> fp, ''
    for cls in gtktypes.top_classes:
        printops(cls, fp)
    for func in gtktypes.functions:
        printfunc(func, fp)
    print >> fp, ''
    print >> fp, 'DeclareGlobalFunction("_GGAP_REGISTER_WIDGETS");'

def write_gi(fp):
    print >> fp, header % ('gi',)
    print >> fp, "## This file is autogenerated\n"
    printenums(gtk, "GTK_", fp);
    print >> fp, ""
    for cls in gtktypes.top_classes:
        printmeths(cls, fp)
    for func in gtktypes.functions:
        printfuncdef(func, fp)
    print >> fp, ''
    print >> fp, "InstallGlobalFunction(_GGAP_REGISTER_WIDGETS,"
    print >> fp, "function()"
    for cls in gtktypes.top_classes:
        printtypes(cls, fp)
    print >> fp, "end);"

if __name__ == '__main__':
    if sys.argv[1:]:
        gd = open(sys.argv[1], "w")
        gi = open(sys.argv[2], "w")
    else:
        gd = sys.stdout
        gi = sys.stdout
    write_gd(gd)
    write_gi(gi)
