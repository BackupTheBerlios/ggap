/*
 *   ggap.opag
 *
 *   Copyright (C) 2004-2006 by Yevgen Muntyan <muntyan@math.tamu.edu>
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation; either version 2 of the License, or
 *   (at your option) any later version.
 *
 *   See COPYING file that comes with this distribution.
 */

#include "config.h"
#include "gapapp.h"
#include "ggap-ui.h"
#include "mooutils/mooutils-fs.h"
#include "mooutils/mooutils-misc.h"
#include "mooutils/moostock.h"
#include <gtk/gtk.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#define DEFAULT_NEW_INSTANCE 0


int _ggap_parse_options (const char *const program_name,
                         const int         argc,
                         char **const      argv);

/********************************************************
 * command line parsing code generated by Opag
 * http://www.zero-based.org/software/opag/
 */
%%
g  gap-cmd      "=COMMAND GAP command line"                     reqarg
e  editor       "Do not start GAP automatically"
E  pure-editor  "Do not enable any GAP stuff"
n  new-app      "Run new instance of application"
u  unique       "Use running instance of application"
   simple       "Simple mode"
l  log          "[=FILE] Show debug output or write it to FILE" optarg
   version      "Display version information and exit"          return
h  help         "Display this help text and exit"               return
%%
/* end of generated code
 ********************************************************/


static void usage (void)
{
    g_print ("Usage: %s [OPTIONS] [FILES]\n", g_get_prgname ());
    g_print ("Options:\n");

    g_print ("%s", STR_HELP_GAP_CMD);
    g_print ("%s", STR_HELP_EDITOR);
    g_print ("%s", STR_HELP_PURE_EDITOR);
    g_print ("%s", STR_HELP_NEW_APP);
    g_print ("%s", STR_HELP_UNIQUE);
    g_print ("%s", STR_HELP_SIMPLE);
    g_print ("%s", STR_HELP_LOG);
    g_print ("%s", STR_HELP_VERSION);
    g_print ("%s", STR_HELP_HELP);
}

static void version (void)
{
    g_print ("ggap %s\n", GGAP_VERSION);
}


int main (int argc, char *argv[])
{
    MooApp *app;
    int opt_remain;
    char **files;
    int retval;
    gboolean new_instance;

    gtk_init (&argc, &argv);

    opt_remain = _ggap_parse_options (g_get_prgname (), argc, argv);

    if (opt_remain < 0)
    {
        usage ();
        return 1;
    }

    if (_ggap_opt_help)
    {
        usage ();
        return 0;
    }
    else if (_ggap_opt_version)
    {
        version ();
        return 0;
    }

    if (_ggap_opt_log)
    {
        if (_ggap_arg_log)
            moo_set_log_func_file (_ggap_arg_log);
        else
            moo_set_log_func_window (TRUE);
    }

    if (_ggap_opt_unique)
        new_instance = FALSE;
    else if (_ggap_opt_new_app)
        new_instance = TRUE;
    else
#if DEFAULT_NEW_INSTANCE
        new_instance = TRUE;
#else
        new_instance = FALSE;
#endif

    GAP_APP_EDITOR_MODE = _ggap_opt_pure_editor != 0;
    files = moo_filenames_from_locale (argv + opt_remain);

    app = g_object_new (GAP_TYPE_APP,
                        "argv", argv,
                        "short-name", "ggap",
                        "full-name", "GGAP",
                        "description", "GGAP is a front end for GAP",
                        "run-input", (gboolean) !_ggap_opt_simple,
                        "default-ui", GGAP_UI,
                        "logo", MOO_STOCK_GGAP,

                        "gap-cmd-line", _ggap_arg_gap_cmd,
                        "editor-mode", (gboolean) _ggap_opt_editor,
                        "simple", (gboolean) _ggap_opt_simple,

                        NULL);

    if ((!new_instance && moo_app_send_files (app, files, 0)) ||
          !moo_app_init (app))
    {
        gdk_notify_startup_complete ();
        g_strfreev (files);
        g_object_unref (app);
        return 0;
    }

    if (files && *files)
    {
        char **p;
        MooEditor *editor;
        MooEditWindow *window;

        editor = moo_app_get_editor (app);
        window = moo_editor_new_window (editor);

        for (p = files; p && *p; ++p)
            moo_editor_new_file (editor, window, NULL, *p, NULL);
    }

    g_strfreev (files);

    retval = moo_app_run (app);

    g_object_unref (app);
    return retval;
}
