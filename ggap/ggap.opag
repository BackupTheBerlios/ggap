/*
 *   ggap.opag
 *
 *   Copyright (C) 2004-2006 by Yevgen Muntyan <muntyan@math.tamu.edu>
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation; either version 2 of the License, or
 *   (at your option) any later version.
 *
 *   See COPYING file that comes with this distribution.
 */

#line 15 "../../../ggap/ggap.opag"

#include "config.h"
#include "gapapp.h"
#include "ggap-ui.h"
#include "ggap-credits.h"
#include "ggap-i18n.h"
#include "ggapfile.h"
#include "mooutils/mooutils-fs.h"
#include "mooutils/mooutils-misc.h"
#include "mooutils/moostock.h"
#include <gtk/gtk.h>
#include <glib/gstdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <locale.h>


#define DEFAULT_NEW_INSTANCE FALSE


int _ggap_parse_options (const char *const program_name,
                         const int         argc,
                         char **const      argv);

/********************************************************
 * command line parsing code generated by Opag
 * http://www.zero-based.org/software/opag/
 */
#line 43 "ggap.c"
%%
g  gap-cmd      "=COMMAND GAP command line"                     reqarg
e  editor       "Do not start GAP automatically"
E  pure-editor  "Do not enable any GAP stuff"
n  new-app      "Run new instance of application"
   fancy        "Fancy mode"
x  extract      "=FILE Unpack saved worksheet file"
l  log          "[=FILE] Show debug output or write it to FILE" optarg
   version      "Display version information and exit"          return
h  help         "Display this help text and exit"               return
%%
#line 57 "../../../ggap/ggap.opag"
/* end of generated code
 ********************************************************/


static void usage (void)
{
    g_print ("Usage: %s [OPTIONS] [FILES]\n", g_get_prgname ());
    g_print ("Options:\n");

    g_print ("%s", STR_HELP_GAP_CMD);
    g_print ("%s", STR_HELP_EDITOR);
    g_print ("%s", STR_HELP_PURE_EDITOR);
    g_print ("%s", STR_HELP_NEW_APP);
    g_print ("%s", STR_HELP_FANCY);
    g_print ("%s", STR_HELP_EXTRACT);
    g_print ("%s", STR_HELP_LOG);
    g_print ("%s", STR_HELP_VERSION);
    g_print ("%s", STR_HELP_HELP);
}

static void version (void)
{
    g_print ("ggap %s\n", GGAP_VERSION);
}


static void
push_appdir_to_path (void)
{
#ifdef __WIN32__
    char *appdir;
    const char *path;
    char *new_path;

    appdir = moo_win32_get_app_dir ();
    g_return_if_fail (appdir != NULL);

    path = g_getenv ("Path");

    if (path)
        new_path = g_strdup_printf ("%s;%s", appdir, path);
    else
        new_path = g_strdup (appdir);

    g_setenv ("Path", new_path, TRUE);

    g_free (new_path);
    g_free (appdir);
#endif
}

static void
extract_file (const char *filename)
{
    GError *error = NULL;
    char *text = NULL;
    gsize text_len = 0;
    char *workspace = NULL;

    if (g_file_test ("worksheet.xml", G_FILE_TEST_EXISTS))
    {
        g_printerr ("File worksheet.xml already exists\n");
        exit (EXIT_FAILURE);
    }

    if (g_file_test ("workspace", G_FILE_TEST_EXISTS))
    {
        g_printerr ("File workspace already exists\n");
        exit (EXIT_FAILURE);
    }

    if (!ggap_file_unpack (filename, &text, &text_len, &workspace, &error))
    {
        if (error)
            g_printerr ("%s\n", error->message);
        else
            g_printerr ("Failed\n");
        exit (EXIT_FAILURE);
    }

    if (g_rename (workspace, "workspace") != 0)
    {
        perror ("rename");
        exit (EXIT_FAILURE);
    }

    if (!g_file_set_contents ("worksheet.xml", text, text_len, &error))
    {
        g_printerr ("%s\n", error->message);
        exit (EXIT_FAILURE);
    }
}

G_GNUC_NORETURN static void
extract_files (char **files)
{
    while (*files)
        extract_file (*files++);
    exit (EXIT_SUCCESS);
}

int main (int argc, char *argv[])
{
    MooApp *app;
    int opt_remain;
    char **files;
    int retval;
    gboolean new_instance;

#ifdef ENABLE_NLS
    bindtextdomain (GETTEXT_PACKAGE, moo_get_locale_dir ());
#ifdef HAVE_BIND_TEXTDOMAIN_CODESET
    bind_textdomain_codeset (GETTEXT_PACKAGE, "UTF-8");
#endif
#endif

    g_thread_init (NULL);
    gdk_threads_init ();
    gdk_threads_enter ();

    gtk_init (&argc, &argv);

    opt_remain = _ggap_parse_options (g_get_prgname (), argc, argv);

    if (opt_remain < 0)
    {
        usage ();
        return EXIT_FAILURE;
    }

    if (_ggap_opt_help)
    {
        usage ();
        return EXIT_SUCCESS;
    }
    else if (_ggap_opt_version)
    {
        version ();
        return EXIT_SUCCESS;
    }

    if (_ggap_opt_log)
    {
        if (_ggap_arg_log)
            moo_set_log_func_file (_ggap_arg_log);
        else
            moo_set_log_func_window (TRUE);
    }

    if (_ggap_opt_extract)
        extract_files (argv + opt_remain);

    if (_ggap_opt_new_app)
        new_instance = TRUE;
    else
        new_instance = DEFAULT_NEW_INSTANCE;

    GAP_APP_EDITOR_MODE = _ggap_opt_pure_editor != 0;
    files = moo_filenames_from_locale (argv + opt_remain);

    push_appdir_to_path ();

    app = g_object_new (GAP_TYPE_APP,
                        "argv", argv,
                        "short-name", "ggap",
                        "full-name", "GGAP",
                        "version", VERSION,
                        "description", "GGAP is a front end for GAP",
                        "run-input", TRUE,
                        "default-ui", GGAP_UI,
                        "logo", "ggap",
                        "credits", THANKS,

//                         "gap-cmd-line", _ggap_arg_gap_cmd,
                        "editor-mode", (gboolean) _ggap_opt_editor,
                        "fancy", (gboolean) _ggap_opt_fancy,

                        NULL);

    if ((!new_instance && moo_app_send_files (app, files, 0, 0, NULL, 0)) ||
          !moo_app_init (app))
    {
        gdk_notify_startup_complete ();
        g_strfreev (files);
        g_object_unref (app);
        return EXIT_SUCCESS;
    }

    if (files && *files)
        moo_app_open_files (app, files, 0, 0, 0);

    g_strfreev (files);

    retval = moo_app_run (app);

    g_object_unref (app);
    gdk_threads_leave ();
    return retval;
}


#if defined(__WIN32__) && !defined(__GNUC__)

#include <windows.h>

int __stdcall
WinMain (HINSTANCE hInstance,
         HINSTANCE hPrevInstance,
         char     *lpszCmdLine,
         int       nCmdShow)
{
	return main (__argc, __argv);
}

#endif
