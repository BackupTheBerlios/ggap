/*
 *   ggap.c
 *
 *   Copyright (C) 2004-2005 by Yevgen Muntyan <muntyan@math.tamu.edu>
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation; either version 2 of the License, or
 *   (at your option) any later version.
 *
 *   See COPYING file that comes with this distribution.
 */

#include "config.h"
#include "gapapp.h"
#include <gtk/gtk.h>
#include <stdlib.h>
#include <string.h>


int _ggap_parse_options (const char *const program_name,
                         const int         argc,
                         char **const      argv);

/********************************************************
 * command line parsing code generated by Opag
 * http://www.zero-based.org/software/opag/
 */
%%
g  gap-cmd      "=COMMAND GAP command line"                     reqarg
e  editor       "Do not start GAP automatically"
n  new-app      "Run new instance of application"
   simple       "Simple mode"
#ifdef __WIN32__
l  log          "[=FILE] Show debug output or write it to FILE" optarg
#endif
#ifdef MOO_USE_PYTHON
p  log-python   "Redirect output to python console"
#endif
   version      "Display version information and exit"          return
h  help         "Display this help text and exit"               return
%%
/* end of generated code
 ********************************************************/


static void usage (void)
{
    g_print ("Usage: %s [OPTIONS] [FILES]\n", g_get_prgname ());
    g_print ("Options:\n");

    g_print ("%s", STR_HELP_GAP_CMD);
    g_print ("%s", STR_HELP_EDITOR);
    g_print ("%s", STR_HELP_NEW_APP);
    g_print ("%s", STR_HELP_SIMPLE);
#ifdef __WIN32__
    g_print ("%s", STR_HELP_LOG);
#endif
#ifdef MOO_USE_PYTHON
    g_print ("%s", STR_HELP_LOG_PYTHON);
#endif
    g_print ("%s", STR_HELP_VERSION);
    g_print ("%s", STR_HELP_HELP);
}

static void version (void)
{
    g_print ("ggap %s\n", GGAP_VERSION);
}


int main (int argc, char *argv[])
{
    MooApp *app;
    int opt_remain;
    G_GNUC_UNUSED gboolean use_python_console = FALSE;

    gtk_init (&argc, &argv);

    opt_remain = _ggap_parse_options (g_get_prgname (), argc, argv);

    if (opt_remain < 0)
    {
        usage ();
        return 1;
    }

    if (_ggap_opt_help)
    {
        usage ();
        return 0;
    }
    else if (_ggap_opt_version)
    {
        version ();
        return 0;
    }

#ifdef __WIN32__
    if (_ggap_opt_log)
    {
        if (_ggap_arg_log)
            moo_set_log_func_file (_ggap_arg_log);
        else
            moo_set_log_func_window (TRUE);
    }
#endif

#ifdef MOO_USE_PYTHON
    if (_ggap_opt_log_python)
        use_python_console = TRUE;
#endif

    app = g_object_new (GAP_TYPE_APP,
                        "argv", argv,
                        "short-name", "ggap",
                        "full-name", "GGAP",
                        "description", "GGAP is a front end for GAP",
                        "run-output", (gboolean) !_ggap_opt_simple,
                        "run-input", (gboolean) !_ggap_opt_simple,

                        "gap-cmd-line", _ggap_arg_gap_cmd,
                        "editor-mode", (gboolean) _ggap_opt_editor,
                        "open-files", argv + opt_remain,
                        "new-app", (gboolean) _ggap_opt_new_app,
                        "simple", (gboolean) _ggap_opt_simple,

#ifdef MOO_USE_PYTHON
                        "use-python-console", use_python_console,
#endif

                        NULL);

    moo_app_init (app);
    return moo_app_run (app);
}
