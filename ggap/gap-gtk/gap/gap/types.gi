#############################################################################
##
#W  types.gi                   ggap package                    Yevgen Muntyan
#W
#Y  Copyright (C) 2004-2007 by Yevgen Muntyan <muntyan@math.tamu.edu>
##
##  This program is free software; you can redistribute it and/or modify
##  it under the terms of the GNU General Public License as published by
##  the Free Software Foundation. See COPYING file that comes with this
##  distribution.
##

##
##  THIS FILE IS AUTOGENERATED
##

BindGlobal("GTK_ANCHOR_CENTER", 0);
BindGlobal("GTK_ANCHOR_N", 1);
BindGlobal("GTK_ANCHOR_NORTH", 1);
BindGlobal("GTK_ANCHOR_NORTH_WEST", 2);
BindGlobal("GTK_ANCHOR_NW", 2);
BindGlobal("GTK_ANCHOR_NE", 3);
BindGlobal("GTK_ANCHOR_NORTH_EAST", 3);
BindGlobal("GTK_ANCHOR_S", 4);
BindGlobal("GTK_ANCHOR_SOUTH", 4);
BindGlobal("GTK_ANCHOR_SOUTH_WEST", 5);
BindGlobal("GTK_ANCHOR_SW", 5);
BindGlobal("GTK_ANCHOR_SE", 6);
BindGlobal("GTK_ANCHOR_SOUTH_EAST", 6);
BindGlobal("GTK_ANCHOR_W", 7);
BindGlobal("GTK_ANCHOR_WEST", 7);
BindGlobal("GTK_ANCHOR_E", 8);
BindGlobal("GTK_ANCHOR_EAST", 8);
BindGlobal("GTK_ARROW_UP", 0);
BindGlobal("GTK_ARROW_DOWN", 1);
BindGlobal("GTK_ARROW_LEFT", 2);
BindGlobal("GTK_ARROW_RIGHT", 3);
BindGlobal("GTK_ARROW_NONE", 4);
BindGlobal("GTK_ASSISTANT_PAGE_CONTENT", 0);
BindGlobal("GTK_ASSISTANT_PAGE_INTRO", 1);
BindGlobal("GTK_ASSISTANT_PAGE_CONFIRM", 2);
BindGlobal("GTK_ASSISTANT_PAGE_SUMMARY", 3);
BindGlobal("GTK_ASSISTANT_PAGE_PROGRESS", 4);
BindGlobal("GTK_EXPAND", 1);
BindGlobal("GTK_SHRINK", 2);
BindGlobal("GTK_FILL", 4);
BindGlobal("GTK_BUTTONBOX_DEFAULT_STYLE", 0);
BindGlobal("GTK_BUTTONBOX_SPREAD", 1);
BindGlobal("GTK_BUTTONBOX_EDGE", 2);
BindGlobal("GTK_BUTTONBOX_START", 3);
BindGlobal("GTK_BUTTONBOX_END", 4);
BindGlobal("GTK_BUTTONS_NONE", 0);
BindGlobal("GTK_BUTTONS_OK", 1);
BindGlobal("GTK_BUTTONS_CLOSE", 2);
BindGlobal("GTK_BUTTONS_CANCEL", 3);
BindGlobal("GTK_BUTTONS_YES_NO", 4);
BindGlobal("GTK_BUTTONS_OK_CANCEL", 5);
BindGlobal("GTK_CALENDAR_SHOW_HEADING", 1);
BindGlobal("GTK_CALENDAR_SHOW_DAY_NAMES", 2);
BindGlobal("GTK_CALENDAR_NO_MONTH_CHANGE", 4);
BindGlobal("GTK_CALENDAR_SHOW_WEEK_NUMBERS", 8);
BindGlobal("GTK_CALENDAR_WEEK_START_MONDAY", 16);
BindGlobal("GTK_CELL_RENDERER_ACCEL_MODE_GTK", 0);
BindGlobal("GTK_CELL_RENDERER_ACCEL_MODE_OTHER", 1);
BindGlobal("GTK_CELL_RENDERER_MODE_INERT", 0);
BindGlobal("GTK_CELL_RENDERER_MODE_ACTIVATABLE", 1);
BindGlobal("GTK_CELL_RENDERER_MODE_EDITABLE", 2);
BindGlobal("GTK_CORNER_TOP_LEFT", 0);
BindGlobal("GTK_CORNER_BOTTOM_LEFT", 1);
BindGlobal("GTK_CORNER_TOP_RIGHT", 2);
BindGlobal("GTK_CORNER_BOTTOM_RIGHT", 3);
BindGlobal("GTK_DIALOG_MODAL", 1);
BindGlobal("GTK_DIALOG_DESTROY_WITH_PARENT", 2);
BindGlobal("GTK_DIALOG_NO_SEPARATOR", 4);
BindGlobal("GTK_DIR_TAB_FORWARD", 0);
BindGlobal("GTK_DIR_TAB_BACKWARD", 1);
BindGlobal("GTK_DIR_UP", 2);
BindGlobal("GTK_DIR_DOWN", 3);
BindGlobal("GTK_DIR_LEFT", 4);
BindGlobal("GTK_DIR_RIGHT", 5);
BindGlobal("GTK_EXPANDER_COLLAPSED", 0);
BindGlobal("GTK_EXPANDER_SEMI_COLLAPSED", 1);
BindGlobal("GTK_EXPANDER_SEMI_EXPANDED", 2);
BindGlobal("GTK_EXPANDER_EXPANDED", 3);
BindGlobal("GTK_FILE_CHOOSER_ACTION_OPEN", 0);
BindGlobal("GTK_FILE_CHOOSER_ACTION_SAVE", 1);
BindGlobal("GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER", 2);
BindGlobal("GTK_FILE_CHOOSER_ACTION_CREATE_FOLDER", 3);
BindGlobal("GTK_FILE_CHOOSER_CONFIRMATION_CONFIRM", 0);
BindGlobal("GTK_FILE_CHOOSER_CONFIRMATION_ACCEPT_FILENAME", 1);
BindGlobal("GTK_FILE_CHOOSER_CONFIRMATION_SELECT_AGAIN", 2);
BindGlobal("GTK_FILE_CHOOSER_ERROR_NONEXISTENT", 0);
BindGlobal("GTK_FILE_CHOOSER_ERROR_BAD_FILENAME", 1);
BindGlobal("GTK_FILE_CHOOSER_ERROR_ALREADY_EXISTS", 2);
BindGlobal("GTK_FILE_FILTER_FILENAME", 1);
BindGlobal("GTK_FILE_FILTER_URI", 2);
BindGlobal("GTK_FILE_FILTER_DISPLAY_NAME", 4);
BindGlobal("GTK_FILE_FILTER_MIME_TYPE", 8);
BindGlobal("GTK_ICON_SIZE_INVALID", 0);
BindGlobal("GTK_ICON_SIZE_MENU", 1);
BindGlobal("GTK_ICON_SIZE_SMALL_TOOLBAR", 2);
BindGlobal("GTK_ICON_SIZE_LARGE_TOOLBAR", 3);
BindGlobal("GTK_ICON_SIZE_BUTTON", 4);
BindGlobal("GTK_ICON_SIZE_DND", 5);
BindGlobal("GTK_ICON_SIZE_DIALOG", 6);
BindGlobal("GTK_JUSTIFY_LEFT", 0);
BindGlobal("GTK_JUSTIFY_RIGHT", 1);
BindGlobal("GTK_JUSTIFY_CENTER", 2);
BindGlobal("GTK_JUSTIFY_FILL", 3);
BindGlobal("GTK_MESSAGE_INFO", 0);
BindGlobal("GTK_MESSAGE_WARNING", 1);
BindGlobal("GTK_MESSAGE_QUESTION", 2);
BindGlobal("GTK_MESSAGE_ERROR", 3);
BindGlobal("GTK_MESSAGE_OTHER", 4);
BindGlobal("GTK_PIXELS", 0);
BindGlobal("GTK_INCHES", 1);
BindGlobal("GTK_CENTIMETERS", 2);
BindGlobal("GTK_ORIENTATION_HORIZONTAL", 0);
BindGlobal("GTK_ORIENTATION_VERTICAL", 1);
BindGlobal("GTK_PACK_DIRECTION_LTR", 0);
BindGlobal("GTK_PACK_DIRECTION_RTL", 1);
BindGlobal("GTK_PACK_DIRECTION_TTB", 2);
BindGlobal("GTK_PACK_DIRECTION_BTT", 3);
BindGlobal("GTK_PACK_START", 0);
BindGlobal("GTK_PACK_END", 1);
BindGlobal("GTK_PAGE_ORIENTATION_PORTRAIT", 0);
BindGlobal("GTK_PAGE_ORIENTATION_LANDSCAPE", 1);
BindGlobal("GTK_PAGE_ORIENTATION_REVERSE_PORTRAIT", 2);
BindGlobal("GTK_PAGE_ORIENTATION_REVERSE_LANDSCAPE", 3);
BindGlobal("GTK_PAGE_SET_ALL", 0);
BindGlobal("GTK_PAGE_SET_EVEN", 1);
BindGlobal("GTK_PAGE_SET_ODD", 2);
BindGlobal("GTK_POLICY_ALWAYS", 0);
BindGlobal("GTK_POLICY_AUTOMATIC", 1);
BindGlobal("GTK_POLICY_NEVER", 2);
BindGlobal("GTK_POS_LEFT", 0);
BindGlobal("GTK_POS_RIGHT", 1);
BindGlobal("GTK_POS_TOP", 2);
BindGlobal("GTK_POS_BOTTOM", 3);
BindGlobal("GTK_PRINT_DUPLEX_SIMPLEX", 0);
BindGlobal("GTK_PRINT_DUPLEX_HORIZONTAL", 1);
BindGlobal("GTK_PRINT_DUPLEX_VERTICAL", 2);
BindGlobal("GTK_PRINT_ERROR_GENERAL", 0);
BindGlobal("GTK_PRINT_ERROR_INTERNAL_ERROR", 1);
BindGlobal("GTK_PRINT_ERROR_NOMEM", 2);
BindGlobal("GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG", 0);
BindGlobal("GTK_PRINT_OPERATION_ACTION_PRINT", 1);
BindGlobal("GTK_PRINT_OPERATION_ACTION_PREVIEW", 2);
BindGlobal("GTK_PRINT_OPERATION_ACTION_EXPORT", 3);
BindGlobal("GTK_PRINT_OPERATION_RESULT_ERROR", 0);
BindGlobal("GTK_PRINT_OPERATION_RESULT_APPLY", 1);
BindGlobal("GTK_PRINT_OPERATION_RESULT_CANCEL", 2);
BindGlobal("GTK_PRINT_OPERATION_RESULT_IN_PROGRESS", 3);
BindGlobal("GTK_PRINT_PAGES_ALL", 0);
BindGlobal("GTK_PRINT_PAGES_CURRENT", 1);
BindGlobal("GTK_PRINT_PAGES_RANGES", 2);
BindGlobal("GTK_PRINT_QUALITY_LOW", 0);
BindGlobal("GTK_PRINT_QUALITY_NORMAL", 1);
BindGlobal("GTK_PRINT_QUALITY_HIGH", 2);
BindGlobal("GTK_PRINT_QUALITY_DRAFT", 3);
BindGlobal("GTK_PRINT_STATUS_INITIAL", 0);
BindGlobal("GTK_PRINT_STATUS_PREPARING", 1);
BindGlobal("GTK_PRINT_STATUS_GENERATING_DATA", 2);
BindGlobal("GTK_PRINT_STATUS_SENDING_DATA", 3);
BindGlobal("GTK_PRINT_STATUS_PENDING", 4);
BindGlobal("GTK_PRINT_STATUS_PENDING_ISSUE", 5);
BindGlobal("GTK_PRINT_STATUS_PRINTING", 6);
BindGlobal("GTK_PRINT_STATUS_FINISHED", 7);
BindGlobal("GTK_PRINT_STATUS_FINISHED_ABORTED", 8);
BindGlobal("GTK_PROGRESS_LEFT_TO_RIGHT", 0);
BindGlobal("GTK_PROGRESS_RIGHT_TO_LEFT", 1);
BindGlobal("GTK_PROGRESS_BOTTOM_TO_TOP", 2);
BindGlobal("GTK_PROGRESS_TOP_TO_BOTTOM", 3);
BindGlobal("GTK_PROGRESS_CONTINUOUS", 0);
BindGlobal("GTK_PROGRESS_DISCRETE", 1);
BindGlobal("GTK_RECENT_CHOOSER_ERROR_NOT_FOUND", 0);
BindGlobal("GTK_RECENT_CHOOSER_ERROR_INVALID_URI", 1);
BindGlobal("GTK_RECENT_FILTER_URI", 1);
BindGlobal("GTK_RECENT_FILTER_DISPLAY_NAME", 2);
BindGlobal("GTK_RECENT_FILTER_MIME_TYPE", 4);
BindGlobal("GTK_RECENT_FILTER_APPLICATION", 8);
BindGlobal("GTK_RECENT_FILTER_GROUP", 16);
BindGlobal("GTK_RECENT_FILTER_AGE", 32);
BindGlobal("GTK_RECENT_MANAGER_ERROR_NOT_FOUND", 0);
BindGlobal("GTK_RECENT_MANAGER_ERROR_INVALID_URI", 1);
BindGlobal("GTK_RECENT_MANAGER_ERROR_INVALID_ENCODING", 2);
BindGlobal("GTK_RECENT_MANAGER_ERROR_NOT_REGISTERED", 3);
BindGlobal("GTK_RECENT_MANAGER_ERROR_READ", 4);
BindGlobal("GTK_RECENT_MANAGER_ERROR_WRITE", 5);
BindGlobal("GTK_RECENT_MANAGER_ERROR_UNKNOWN", 6);
BindGlobal("GTK_RECENT_SORT_NONE", 0);
BindGlobal("GTK_RECENT_SORT_MRU", 1);
BindGlobal("GTK_RECENT_SORT_LRU", 2);
BindGlobal("GTK_RECENT_SORT_CUSTOM", 3);
BindGlobal("GTK_RELIEF_NORMAL", 0);
BindGlobal("GTK_RELIEF_HALF", 1);
BindGlobal("GTK_RELIEF_NONE", 2);
BindGlobal("GTK_RESPONSE_HELP", -11);
BindGlobal("GTK_RESPONSE_APPLY", -10);
BindGlobal("GTK_RESPONSE_NO", -9);
BindGlobal("GTK_RESPONSE_YES", -8);
BindGlobal("GTK_RESPONSE_CLOSE", -7);
BindGlobal("GTK_RESPONSE_CANCEL", -6);
BindGlobal("GTK_RESPONSE_OK", -5);
BindGlobal("GTK_RESPONSE_DELETE_EVENT", -4);
BindGlobal("GTK_RESPONSE_ACCEPT", -3);
BindGlobal("GTK_RESPONSE_REJECT", -2);
BindGlobal("GTK_RESPONSE_NONE", -1);
BindGlobal("GTK_SCROLL_STEPS", 0);
BindGlobal("GTK_SCROLL_PAGES", 1);
BindGlobal("GTK_SCROLL_ENDS", 2);
BindGlobal("GTK_SCROLL_HORIZONTAL_STEPS", 3);
BindGlobal("GTK_SCROLL_HORIZONTAL_PAGES", 4);
BindGlobal("GTK_SCROLL_HORIZONTAL_ENDS", 5);
BindGlobal("GTK_SCROLL_NONE", 0);
BindGlobal("GTK_SCROLL_JUMP", 1);
BindGlobal("GTK_SCROLL_STEP_BACKWARD", 2);
BindGlobal("GTK_SCROLL_STEP_FORWARD", 3);
BindGlobal("GTK_SCROLL_PAGE_BACKWARD", 4);
BindGlobal("GTK_SCROLL_PAGE_FORWARD", 5);
BindGlobal("GTK_SCROLL_STEP_UP", 6);
BindGlobal("GTK_SCROLL_STEP_DOWN", 7);
BindGlobal("GTK_SCROLL_PAGE_UP", 8);
BindGlobal("GTK_SCROLL_PAGE_DOWN", 9);
BindGlobal("GTK_SCROLL_STEP_LEFT", 10);
BindGlobal("GTK_SCROLL_STEP_RIGHT", 11);
BindGlobal("GTK_SCROLL_PAGE_LEFT", 12);
BindGlobal("GTK_SCROLL_PAGE_RIGHT", 13);
BindGlobal("GTK_SCROLL_START", 14);
BindGlobal("GTK_SCROLL_END", 15);
BindGlobal("GTK_SELECTION_NONE", 0);
BindGlobal("GTK_SELECTION_SINGLE", 1);
BindGlobal("GTK_SELECTION_BROWSE", 2);
BindGlobal("GTK_SELECTION_EXTENDED", 3);
BindGlobal("GTK_SELECTION_MULTIPLE", 3);
BindGlobal("GTK_SENSITIVITY_AUTO", 0);
BindGlobal("GTK_SENSITIVITY_ON", 1);
BindGlobal("GTK_SENSITIVITY_OFF", 2);
BindGlobal("GTK_SHADOW_NONE", 0);
BindGlobal("GTK_SHADOW_IN", 1);
BindGlobal("GTK_SHADOW_OUT", 2);
BindGlobal("GTK_SHADOW_ETCHED_IN", 3);
BindGlobal("GTK_SHADOW_ETCHED_OUT", 4);
BindGlobal("GTK_SIZE_GROUP_NONE", 0);
BindGlobal("GTK_SIZE_GROUP_HORIZONTAL", 1);
BindGlobal("GTK_SIZE_GROUP_VERTICAL", 2);
BindGlobal("GTK_SIZE_GROUP_BOTH", 3);
BindGlobal("GTK_SORT_ASCENDING", 0);
BindGlobal("GTK_SORT_DESCENDING", 1);
BindGlobal("GTK_UPDATE_ALWAYS", 0);
BindGlobal("GTK_UPDATE_IF_VALID", 1);
BindGlobal("GTK_SPIN_STEP_FORWARD", 0);
BindGlobal("GTK_SPIN_STEP_BACKWARD", 1);
BindGlobal("GTK_SPIN_PAGE_FORWARD", 2);
BindGlobal("GTK_SPIN_PAGE_BACKWARD", 3);
BindGlobal("GTK_SPIN_HOME", 4);
BindGlobal("GTK_SPIN_END", 5);
BindGlobal("GTK_SPIN_USER_DEFINED", 6);
BindGlobal("GTK_TEXT_BUFFER_TARGET_INFO_TEXT", -3);
BindGlobal("GTK_TEXT_BUFFER_TARGET_INFO_RICH_TEXT", -2);
BindGlobal("GTK_TEXT_BUFFER_TARGET_INFO_BUFFER_CONTENTS", -1);
BindGlobal("GTK_TEXT_SEARCH_VISIBLE_ONLY", 1);
BindGlobal("GTK_TEXT_SEARCH_TEXT_ONLY", 2);
BindGlobal("GTK_TOOLBAR_ICONS", 0);
BindGlobal("GTK_TOOLBAR_TEXT", 1);
BindGlobal("GTK_TOOLBAR_BOTH", 2);
BindGlobal("GTK_TOOLBAR_BOTH_HORIZ", 3);
BindGlobal("GTK_TREE_VIEW_COLUMN_GROW_ONLY", 0);
BindGlobal("GTK_TREE_VIEW_COLUMN_AUTOSIZE", 1);
BindGlobal("GTK_TREE_VIEW_COLUMN_FIXED", 2);
BindGlobal("GTK_TREE_VIEW_GRID_LINES_NONE", 0);
BindGlobal("GTK_TREE_VIEW_GRID_LINES_HORIZONTAL", 1);
BindGlobal("GTK_TREE_VIEW_GRID_LINES_VERTICAL", 2);
BindGlobal("GTK_TREE_VIEW_GRID_LINES_BOTH", 3);
BindGlobal("GTK_TREE_VIEW_LINE", 0);
BindGlobal("GTK_TREE_VIEW_ITEM", 1);
BindGlobal("GTK_UNIT_PIXEL", 0);
BindGlobal("GTK_UNIT_POINTS", 1);
BindGlobal("GTK_UNIT_INCH", 2);
BindGlobal("GTK_UNIT_MM", 3);
BindGlobal("GTK_UPDATE_CONTINUOUS", 0);
BindGlobal("GTK_UPDATE_DISCONTINUOUS", 1);
BindGlobal("GTK_UPDATE_DELAYED", 2);
BindGlobal("GTK_TOPLEVEL", 16);
BindGlobal("GTK_NO_WINDOW", 32);
BindGlobal("GTK_REALIZED", 64);
BindGlobal("GTK_MAPPED", 128);
BindGlobal("GTK_VISIBLE", 256);
BindGlobal("GTK_SENSITIVE", 512);
BindGlobal("GTK_PARENT_SENSITIVE", 1024);
BindGlobal("GTK_CAN_FOCUS", 2048);
BindGlobal("GTK_HAS_FOCUS", 4096);
BindGlobal("GTK_CAN_DEFAULT", 8192);
BindGlobal("GTK_HAS_DEFAULT", 16384);
BindGlobal("GTK_HAS_GRAB", 32768);
BindGlobal("GTK_RC_STYLE", 65536);
BindGlobal("GTK_COMPOSITE_CHILD", 131072);
BindGlobal("GTK_NO_REPARENT", 262144);
BindGlobal("GTK_APP_PAINTABLE", 524288);
BindGlobal("GTK_RECEIVES_DEFAULT", 1048576);
BindGlobal("GTK_DOUBLE_BUFFERED", 2097152);
BindGlobal("GTK_NO_SHOW_ALL", 4194304);
BindGlobal("GTK_WIN_POS_NONE", 0);
BindGlobal("GTK_WIN_POS_CENTER", 1);
BindGlobal("GTK_WIN_POS_MOUSE", 2);
BindGlobal("GTK_WIN_POS_CENTER_ALWAYS", 3);
BindGlobal("GTK_WIN_POS_CENTER_ON_PARENT", 4);
BindGlobal("GTK_WINDOW_TOPLEVEL", 0);
BindGlobal("GTK_WINDOW_POPUP", 1);
BindGlobal("GTK_WRAP_NONE", 0);
BindGlobal("GTK_WRAP_CHAR", 1);
BindGlobal("GTK_WRAP_WORD", 2);
BindGlobal("GTK_WRAP_WORD_CHAR", 3);
BindGlobal("GDK_AXIS_IGNORE", 0);
BindGlobal("GDK_AXIS_X", 1);
BindGlobal("GDK_AXIS_Y", 2);
BindGlobal("GDK_AXIS_PRESSURE", 3);
BindGlobal("GDK_AXIS_XTILT", 4);
BindGlobal("GDK_AXIS_YTILT", 5);
BindGlobal("GDK_AXIS_WHEEL", 6);
BindGlobal("GDK_AXIS_LAST", 7);
BindGlobal("GDK_LSB_FIRST", 0);
BindGlobal("GDK_MSB_FIRST", 1);
BindGlobal("GDK_CAP_NOT_LAST", 0);
BindGlobal("GDK_CAP_BUTT", 1);
BindGlobal("GDK_CAP_ROUND", 2);
BindGlobal("GDK_CAP_PROJECTING", 3);
BindGlobal("GDK_COLORSPACE_RGB", 0);
BindGlobal("GDK_CROSSING_NORMAL", 0);
BindGlobal("GDK_CROSSING_GRAB", 1);
BindGlobal("GDK_CROSSING_UNGRAB", 2);
BindGlobal("GDK_CURSOR_IS_PIXMAP", -1);
BindGlobal("GDK_X_CURSOR", 0);
BindGlobal("GDK_ARROW", 2);
BindGlobal("GDK_BASED_ARROW_DOWN", 4);
BindGlobal("GDK_BASED_ARROW_UP", 6);
BindGlobal("GDK_BOAT", 8);
BindGlobal("GDK_BOGOSITY", 10);
BindGlobal("GDK_BOTTOM_LEFT_CORNER", 12);
BindGlobal("GDK_BOTTOM_RIGHT_CORNER", 14);
BindGlobal("GDK_BOTTOM_SIDE", 16);
BindGlobal("GDK_BOTTOM_TEE", 18);
BindGlobal("GDK_BOX_SPIRAL", 20);
BindGlobal("GDK_CENTER_PTR", 22);
BindGlobal("GDK_CIRCLE", 24);
BindGlobal("GDK_CLOCK", 26);
BindGlobal("GDK_COFFEE_MUG", 28);
BindGlobal("GDK_CROSS", 30);
BindGlobal("GDK_CROSS_REVERSE", 32);
BindGlobal("GDK_CROSSHAIR", 34);
BindGlobal("GDK_DIAMOND_CROSS", 36);
BindGlobal("GDK_DOT", 38);
BindGlobal("GDK_DOTBOX", 40);
BindGlobal("GDK_DOUBLE_ARROW", 42);
BindGlobal("GDK_DRAFT_LARGE", 44);
BindGlobal("GDK_DRAFT_SMALL", 46);
BindGlobal("GDK_DRAPED_BOX", 48);
BindGlobal("GDK_EXCHANGE", 50);
BindGlobal("GDK_FLEUR", 52);
BindGlobal("GDK_GOBBLER", 54);
BindGlobal("GDK_GUMBY", 56);
BindGlobal("GDK_HAND1", 58);
BindGlobal("GDK_HAND2", 60);
BindGlobal("GDK_HEART", 62);
BindGlobal("GDK_ICON", 64);
BindGlobal("GDK_IRON_CROSS", 66);
BindGlobal("GDK_LEFT_PTR", 68);
BindGlobal("GDK_LEFT_SIDE", 70);
BindGlobal("GDK_LEFT_TEE", 72);
BindGlobal("GDK_LEFTBUTTON", 74);
BindGlobal("GDK_LL_ANGLE", 76);
BindGlobal("GDK_LR_ANGLE", 78);
BindGlobal("GDK_MAN", 80);
BindGlobal("GDK_MIDDLEBUTTON", 82);
BindGlobal("GDK_MOUSE", 84);
BindGlobal("GDK_PENCIL", 86);
BindGlobal("GDK_PIRATE", 88);
BindGlobal("GDK_PLUS", 90);
BindGlobal("GDK_QUESTION_ARROW", 92);
BindGlobal("GDK_RIGHT_PTR", 94);
BindGlobal("GDK_RIGHT_SIDE", 96);
BindGlobal("GDK_RIGHT_TEE", 98);
BindGlobal("GDK_RIGHTBUTTON", 100);
BindGlobal("GDK_RTL_LOGO", 102);
BindGlobal("GDK_SAILBOAT", 104);
BindGlobal("GDK_SB_DOWN_ARROW", 106);
BindGlobal("GDK_SB_H_DOUBLE_ARROW", 108);
BindGlobal("GDK_SB_LEFT_ARROW", 110);
BindGlobal("GDK_SB_RIGHT_ARROW", 112);
BindGlobal("GDK_SB_UP_ARROW", 114);
BindGlobal("GDK_SB_V_DOUBLE_ARROW", 116);
BindGlobal("GDK_SHUTTLE", 118);
BindGlobal("GDK_SIZING", 120);
BindGlobal("GDK_SPIDER", 122);
BindGlobal("GDK_SPRAYCAN", 124);
BindGlobal("GDK_STAR", 126);
BindGlobal("GDK_TARGET", 128);
BindGlobal("GDK_TCROSS", 130);
BindGlobal("GDK_TOP_LEFT_ARROW", 132);
BindGlobal("GDK_TOP_LEFT_CORNER", 134);
BindGlobal("GDK_TOP_RIGHT_CORNER", 136);
BindGlobal("GDK_TOP_SIDE", 138);
BindGlobal("GDK_TOP_TEE", 140);
BindGlobal("GDK_TREK", 142);
BindGlobal("GDK_UL_ANGLE", 144);
BindGlobal("GDK_UMBRELLA", 146);
BindGlobal("GDK_UR_ANGLE", 148);
BindGlobal("GDK_WATCH", 150);
BindGlobal("GDK_XTERM", 152);
BindGlobal("GDK_LAST_CURSOR", 153);
BindGlobal("GDK_ACTION_DEFAULT", 1);
BindGlobal("GDK_ACTION_COPY", 2);
BindGlobal("GDK_ACTION_MOVE", 4);
BindGlobal("GDK_ACTION_LINK", 8);
BindGlobal("GDK_ACTION_PRIVATE", 16);
BindGlobal("GDK_ACTION_ASK", 32);
BindGlobal("GDK_DRAG_PROTO_MOTIF", 0);
BindGlobal("GDK_DRAG_PROTO_XDND", 1);
BindGlobal("GDK_DRAG_PROTO_ROOTWIN", 2);
BindGlobal("GDK_DRAG_PROTO_NONE", 3);
BindGlobal("GDK_DRAG_PROTO_WIN32_DROPFILES", 4);
BindGlobal("GDK_DRAG_PROTO_OLE2", 5);
BindGlobal("GDK_DRAG_PROTO_LOCAL", 6);
BindGlobal("GDK_EXPOSURE_MASK", 2);
BindGlobal("GDK_POINTER_MOTION_MASK", 4);
BindGlobal("GDK_POINTER_MOTION_HINT_MASK", 8);
BindGlobal("GDK_BUTTON_MOTION_MASK", 16);
BindGlobal("GDK_BUTTON1_MOTION_MASK", 32);
BindGlobal("GDK_BUTTON2_MOTION_MASK", 64);
BindGlobal("GDK_BUTTON3_MOTION_MASK", 128);
BindGlobal("GDK_BUTTON_PRESS_MASK", 256);
BindGlobal("GDK_BUTTON_RELEASE_MASK", 512);
BindGlobal("GDK_KEY_PRESS_MASK", 1024);
BindGlobal("GDK_KEY_RELEASE_MASK", 2048);
BindGlobal("GDK_ENTER_NOTIFY_MASK", 4096);
BindGlobal("GDK_LEAVE_NOTIFY_MASK", 8192);
BindGlobal("GDK_FOCUS_CHANGE_MASK", 16384);
BindGlobal("GDK_STRUCTURE_MASK", 32768);
BindGlobal("GDK_PROPERTY_CHANGE_MASK", 65536);
BindGlobal("GDK_VISIBILITY_NOTIFY_MASK", 131072);
BindGlobal("GDK_PROXIMITY_IN_MASK", 262144);
BindGlobal("GDK_PROXIMITY_OUT_MASK", 524288);
BindGlobal("GDK_SUBSTRUCTURE_MASK", 1048576);
BindGlobal("GDK_SCROLL_MASK", 2097152);
BindGlobal("GDK_ALL_EVENTS_MASK", 4194302);
BindGlobal("GDK_NOTHING", -1);
BindGlobal("GDK_DELETE", 0);
BindGlobal("GDK_DESTROY", 1);
BindGlobal("GDK_EXPOSE", 2);
BindGlobal("GDK_MOTION_NOTIFY", 3);
BindGlobal("GDK_BUTTON_PRESS", 4);
BindGlobal("GDK_2BUTTON_PRESS", 5);
BindGlobal("GDK_3BUTTON_PRESS", 6);
BindGlobal("GDK_BUTTON_RELEASE", 7);
BindGlobal("GDK_KEY_PRESS", 8);
BindGlobal("GDK_KEY_RELEASE", 9);
BindGlobal("GDK_ENTER_NOTIFY", 10);
BindGlobal("GDK_LEAVE_NOTIFY", 11);
BindGlobal("GDK_FOCUS_CHANGE", 12);
BindGlobal("GDK_CONFIGURE", 13);
BindGlobal("GDK_MAP", 14);
BindGlobal("GDK_UNMAP", 15);
BindGlobal("GDK_PROPERTY_NOTIFY", 16);
BindGlobal("GDK_SELECTION_CLEAR", 17);
BindGlobal("GDK_SELECTION_REQUEST", 18);
BindGlobal("GDK_SELECTION_NOTIFY", 19);
BindGlobal("GDK_PROXIMITY_IN", 20);
BindGlobal("GDK_PROXIMITY_OUT", 21);
BindGlobal("GDK_DRAG_ENTER", 22);
BindGlobal("GDK_DRAG_LEAVE", 23);
BindGlobal("GDK_DRAG_MOTION", 24);
BindGlobal("GDK_DRAG_STATUS", 25);
BindGlobal("GDK_DROP_START", 26);
BindGlobal("GDK_DROP_FINISHED", 27);
BindGlobal("GDK_CLIENT_EVENT", 28);
BindGlobal("GDK_VISIBILITY_NOTIFY", 29);
BindGlobal("GDK_NO_EXPOSE", 30);
BindGlobal("GDK_SCROLL", 31);
BindGlobal("GDK_WINDOW_STATE", 32);
BindGlobal("GDK_SETTING", 33);
BindGlobal("GDK_OWNER_CHANGE", 34);
BindGlobal("GDK_GRAB_BROKEN", 35);
BindGlobal("GDK_EXTENSION_EVENTS_NONE", 0);
BindGlobal("GDK_EXTENSION_EVENTS_ALL", 1);
BindGlobal("GDK_EXTENSION_EVENTS_CURSOR", 2);
BindGlobal("GDK_SOLID", 0);
BindGlobal("GDK_TILED", 1);
BindGlobal("GDK_STIPPLED", 2);
BindGlobal("GDK_OPAQUE_STIPPLED", 3);
BindGlobal("GDK_EVEN_ODD_RULE", 0);
BindGlobal("GDK_WINDING_RULE", 1);
BindGlobal("GDK_FILTER_CONTINUE", 0);
BindGlobal("GDK_FILTER_TRANSLATE", 1);
BindGlobal("GDK_FILTER_REMOVE", 2);
BindGlobal("GDK_FONT_FONT", 0);
BindGlobal("GDK_FONT_FONTSET", 1);
BindGlobal("GDK_COPY", 0);
BindGlobal("GDK_INVERT", 1);
BindGlobal("GDK_XOR", 2);
BindGlobal("GDK_CLEAR", 3);
BindGlobal("GDK_AND", 4);
BindGlobal("GDK_AND_REVERSE", 5);
BindGlobal("GDK_AND_INVERT", 6);
BindGlobal("GDK_NOOP", 7);
BindGlobal("GDK_OR", 8);
BindGlobal("GDK_EQUIV", 9);
BindGlobal("GDK_OR_REVERSE", 10);
BindGlobal("GDK_COPY_INVERT", 11);
BindGlobal("GDK_OR_INVERT", 12);
BindGlobal("GDK_NAND", 13);
BindGlobal("GDK_NOR", 14);
BindGlobal("GDK_SET", 15);
BindGlobal("GDK_GC_FOREGROUND", 1);
BindGlobal("GDK_GC_BACKGROUND", 2);
BindGlobal("GDK_GC_FONT", 4);
BindGlobal("GDK_GC_FUNCTION", 8);
BindGlobal("GDK_GC_FILL", 16);
BindGlobal("GDK_GC_TILE", 32);
BindGlobal("GDK_GC_STIPPLE", 64);
BindGlobal("GDK_GC_CLIP_MASK", 128);
BindGlobal("GDK_GC_SUBWINDOW", 256);
BindGlobal("GDK_GC_TS_X_ORIGIN", 512);
BindGlobal("GDK_GC_TS_Y_ORIGIN", 1024);
BindGlobal("GDK_GC_CLIP_X_ORIGIN", 2048);
BindGlobal("GDK_GC_CLIP_Y_ORIGIN", 4096);
BindGlobal("GDK_GC_EXPOSURES", 8192);
BindGlobal("GDK_GC_LINE_WIDTH", 16384);
BindGlobal("GDK_GC_LINE_STYLE", 32768);
BindGlobal("GDK_GC_CAP_STYLE", 65536);
BindGlobal("GDK_GC_JOIN_STYLE", 131072);
BindGlobal("GDK_GRAB_SUCCESS", 0);
BindGlobal("GDK_GRAB_ALREADY_GRABBED", 1);
BindGlobal("GDK_GRAB_INVALID_TIME", 2);
BindGlobal("GDK_GRAB_NOT_VIEWABLE", 3);
BindGlobal("GDK_GRAB_FROZEN", 4);
BindGlobal("GDK_GRAVITY_NORTH_WEST", 1);
BindGlobal("GDK_GRAVITY_NORTH", 2);
BindGlobal("GDK_GRAVITY_NORTH_EAST", 3);
BindGlobal("GDK_GRAVITY_WEST", 4);
BindGlobal("GDK_GRAVITY_CENTER", 5);
BindGlobal("GDK_GRAVITY_EAST", 6);
BindGlobal("GDK_GRAVITY_SOUTH_WEST", 7);
BindGlobal("GDK_GRAVITY_SOUTH", 8);
BindGlobal("GDK_GRAVITY_SOUTH_EAST", 9);
BindGlobal("GDK_GRAVITY_STATIC", 10);
BindGlobal("GDK_IMAGE_NORMAL", 0);
BindGlobal("GDK_IMAGE_SHARED", 1);
BindGlobal("GDK_IMAGE_FASTEST", 2);
BindGlobal("GDK_MODE_DISABLED", 0);
BindGlobal("GDK_MODE_SCREEN", 1);
BindGlobal("GDK_MODE_WINDOW", 2);
BindGlobal("GDK_SOURCE_MOUSE", 0);
BindGlobal("GDK_SOURCE_PEN", 1);
BindGlobal("GDK_SOURCE_ERASER", 2);
BindGlobal("GDK_SOURCE_CURSOR", 3);
BindGlobal("GDK_INTERP_NEAREST", 0);
BindGlobal("GDK_INTERP_TILES", 1);
BindGlobal("GDK_INTERP_BILINEAR", 2);
BindGlobal("GDK_INTERP_HYPER", 3);
BindGlobal("GDK_JOIN_MITER", 0);
BindGlobal("GDK_JOIN_ROUND", 1);
BindGlobal("GDK_JOIN_BEVEL", 2);
BindGlobal("GDK_LINE_SOLID", 0);
BindGlobal("GDK_LINE_ON_OFF_DASH", 1);
BindGlobal("GDK_LINE_DOUBLE_DASH", 2);
BindGlobal("GDK_SHIFT_MASK", 1);
BindGlobal("GDK_LOCK_MASK", 2);
BindGlobal("GDK_CONTROL_MASK", 4);
BindGlobal("GDK_MOD1_MASK", 8);
BindGlobal("GDK_MOD2_MASK", 16);
BindGlobal("GDK_MOD3_MASK", 32);
BindGlobal("GDK_MOD4_MASK", 64);
BindGlobal("GDK_MOD5_MASK", 128);
BindGlobal("GDK_BUTTON1_MASK", 256);
BindGlobal("GDK_BUTTON2_MASK", 512);
BindGlobal("GDK_BUTTON3_MASK", 1024);
BindGlobal("GDK_BUTTON4_MASK", 2048);
BindGlobal("GDK_BUTTON5_MASK", 4096);
BindGlobal("GDK_SUPER_MASK", 67108864);
BindGlobal("GDK_HYPER_MASK", 134217728);
BindGlobal("GDK_META_MASK", 268435456);
BindGlobal("GDK_RELEASE_MASK", 1073741824);
BindGlobal("GDK_MODIFIER_MASK", 1543512063);
BindGlobal("GDK_NOTIFY_ANCESTOR", 0);
BindGlobal("GDK_NOTIFY_VIRTUAL", 1);
BindGlobal("GDK_NOTIFY_INFERIOR", 2);
BindGlobal("GDK_NOTIFY_NONLINEAR", 3);
BindGlobal("GDK_NOTIFY_NONLINEAR_VIRTUAL", 4);
BindGlobal("GDK_NOTIFY_UNKNOWN", 5);
BindGlobal("GDK_OVERLAP_RECTANGLE_IN", 0);
BindGlobal("GDK_OVERLAP_RECTANGLE_OUT", 1);
BindGlobal("GDK_OVERLAP_RECTANGLE_PART", 2);
BindGlobal("GDK_OWNER_CHANGE_NEW_OWNER", 0);
BindGlobal("GDK_OWNER_CHANGE_DESTROY", 1);
BindGlobal("GDK_OWNER_CHANGE_CLOSE", 2);
BindGlobal("GDK_PIXBUF_ALPHA_BILEVEL", 0);
BindGlobal("GDK_PIXBUF_ALPHA_FULL", 1);
BindGlobal("GDK_PIXBUF_ERROR_CORRUPT_IMAGE", 0);
BindGlobal("GDK_PIXBUF_ERROR_INSUFFICIENT_MEMORY", 1);
BindGlobal("GDK_PIXBUF_ERROR_BAD_OPTION", 2);
BindGlobal("GDK_PIXBUF_ERROR_UNKNOWN_TYPE", 3);
BindGlobal("GDK_PIXBUF_ERROR_UNSUPPORTED_OPERATION", 4);
BindGlobal("GDK_PIXBUF_ERROR_FAILED", 5);
BindGlobal("GDK_PIXBUF_ROTATE_NONE", 0);
BindGlobal("GDK_PIXBUF_ROTATE_COUNTERCLOCKWISE", 90);
BindGlobal("GDK_PIXBUF_ROTATE_UPSIDEDOWN", 180);
BindGlobal("GDK_PIXBUF_ROTATE_CLOCKWISE", 270);
BindGlobal("GDK_PROP_MODE_REPLACE", 0);
BindGlobal("GDK_PROP_MODE_PREPEND", 1);
BindGlobal("GDK_PROP_MODE_APPEND", 2);
BindGlobal("GDK_PROPERTY_NEW_VALUE", 0);
BindGlobal("GDK_PROPERTY_DELETE", 1);
BindGlobal("GDK_RGB_DITHER_NONE", 0);
BindGlobal("GDK_RGB_DITHER_NORMAL", 1);
BindGlobal("GDK_RGB_DITHER_MAX", 2);
BindGlobal("GDK_SCROLL_UP", 0);
BindGlobal("GDK_SCROLL_DOWN", 1);
BindGlobal("GDK_SCROLL_LEFT", 2);
BindGlobal("GDK_SCROLL_RIGHT", 3);
BindGlobal("GDK_SETTING_ACTION_NEW", 0);
BindGlobal("GDK_SETTING_ACTION_CHANGED", 1);
BindGlobal("GDK_SETTING_ACTION_DELETED", 2);
BindGlobal("GDK_ERROR_MEM", -4);
BindGlobal("GDK_ERROR_FILE", -3);
BindGlobal("GDK_ERROR_PARAM", -2);
BindGlobal("GDK_ERROR", -1);
BindGlobal("GDK_OK", 0);
BindGlobal("GDK_CLIP_BY_CHILDREN", 0);
BindGlobal("GDK_INCLUDE_INFERIORS", 1);
BindGlobal("GDK_VISIBILITY_UNOBSCURED", 0);
BindGlobal("GDK_VISIBILITY_PARTIAL", 1);
BindGlobal("GDK_VISIBILITY_FULLY_OBSCURED", 2);
BindGlobal("GDK_VISUAL_STATIC_GRAY", 0);
BindGlobal("GDK_VISUAL_GRAYSCALE", 1);
BindGlobal("GDK_VISUAL_STATIC_COLOR", 2);
BindGlobal("GDK_VISUAL_PSEUDO_COLOR", 3);
BindGlobal("GDK_VISUAL_TRUE_COLOR", 4);
BindGlobal("GDK_VISUAL_DIRECT_COLOR", 5);
BindGlobal("GDK_DECOR_ALL", 1);
BindGlobal("GDK_DECOR_BORDER", 2);
BindGlobal("GDK_DECOR_RESIZEH", 4);
BindGlobal("GDK_DECOR_TITLE", 8);
BindGlobal("GDK_DECOR_MENU", 16);
BindGlobal("GDK_DECOR_MINIMIZE", 32);
BindGlobal("GDK_DECOR_MAXIMIZE", 64);
BindGlobal("GDK_FUNC_ALL", 1);
BindGlobal("GDK_FUNC_RESIZE", 2);
BindGlobal("GDK_FUNC_MOVE", 4);
BindGlobal("GDK_FUNC_MINIMIZE", 8);
BindGlobal("GDK_FUNC_MAXIMIZE", 16);
BindGlobal("GDK_FUNC_CLOSE", 32);
BindGlobal("GDK_WA_TITLE", 2);
BindGlobal("GDK_WA_X", 4);
BindGlobal("GDK_WA_Y", 8);
BindGlobal("GDK_WA_CURSOR", 16);
BindGlobal("GDK_WA_COLORMAP", 32);
BindGlobal("GDK_WA_VISUAL", 64);
BindGlobal("GDK_WA_WMCLASS", 128);
BindGlobal("GDK_WA_NOREDIR", 256);
BindGlobal("GDK_WA_TYPE_HINT", 512);
BindGlobal("GDK_INPUT_OUTPUT", 0);
BindGlobal("GDK_INPUT_ONLY", 1);
BindGlobal("GDK_WINDOW_EDGE_NORTH_WEST", 0);
BindGlobal("GDK_WINDOW_EDGE_NORTH", 1);
BindGlobal("GDK_WINDOW_EDGE_NORTH_EAST", 2);
BindGlobal("GDK_WINDOW_EDGE_WEST", 3);
BindGlobal("GDK_WINDOW_EDGE_EAST", 4);
BindGlobal("GDK_WINDOW_EDGE_SOUTH_WEST", 5);
BindGlobal("GDK_WINDOW_EDGE_SOUTH", 6);
BindGlobal("GDK_WINDOW_EDGE_SOUTH_EAST", 7);
BindGlobal("GDK_HINT_POS", 1);
BindGlobal("GDK_HINT_MIN_SIZE", 2);
BindGlobal("GDK_HINT_MAX_SIZE", 4);
BindGlobal("GDK_HINT_BASE_SIZE", 8);
BindGlobal("GDK_HINT_ASPECT", 16);
BindGlobal("GDK_HINT_RESIZE_INC", 32);
BindGlobal("GDK_HINT_WIN_GRAVITY", 64);
BindGlobal("GDK_HINT_USER_POS", 128);
BindGlobal("GDK_HINT_USER_SIZE", 256);
BindGlobal("GDK_WINDOW_STATE_WITHDRAWN", 1);
BindGlobal("GDK_WINDOW_STATE_ICONIFIED", 2);
BindGlobal("GDK_WINDOW_STATE_MAXIMIZED", 4);
BindGlobal("GDK_WINDOW_STATE_STICKY", 8);
BindGlobal("GDK_WINDOW_STATE_FULLSCREEN", 16);
BindGlobal("GDK_WINDOW_STATE_ABOVE", 32);
BindGlobal("GDK_WINDOW_STATE_BELOW", 64);
BindGlobal("GDK_WINDOW_ROOT", 0);
BindGlobal("GDK_WINDOW_TOPLEVEL", 1);
BindGlobal("GDK_WINDOW_CHILD", 2);
BindGlobal("GDK_WINDOW_DIALOG", 3);
BindGlobal("GDK_WINDOW_TEMP", 4);
BindGlobal("GDK_WINDOW_FOREIGN", 5);
BindGlobal("GDK_WINDOW_TYPE_HINT_NORMAL", 0);
BindGlobal("GDK_WINDOW_TYPE_HINT_DIALOG", 1);
BindGlobal("GDK_WINDOW_TYPE_HINT_MENU", 2);
BindGlobal("GDK_WINDOW_TYPE_HINT_TOOLBAR", 3);
BindGlobal("GDK_WINDOW_TYPE_HINT_SPLASHSCREEN", 4);
BindGlobal("GDK_WINDOW_TYPE_HINT_UTILITY", 5);
BindGlobal("GDK_WINDOW_TYPE_HINT_DOCK", 6);
BindGlobal("GDK_WINDOW_TYPE_HINT_DESKTOP", 7);
BindGlobal("GDK_WINDOW_TYPE_HINT_DROPDOWN_MENU", 8);
BindGlobal("GDK_WINDOW_TYPE_HINT_POPUP_MENU", 9);
BindGlobal("GDK_WINDOW_TYPE_HINT_TOOLTIP", 10);
BindGlobal("GDK_WINDOW_TYPE_HINT_NOTIFICATION", 11);
BindGlobal("GDK_WINDOW_TYPE_HINT_COMBO", 12);
BindGlobal("GDK_WINDOW_TYPE_HINT_DND", 13);
BindGlobal("GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID", -1);
BindGlobal("GTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID", -2);
BindGlobal("GTK_STOCK_ABOUT", "gtk-about");
BindGlobal("GTK_STOCK_ADD", "gtk-add");
BindGlobal("GTK_STOCK_APPLY", "gtk-apply");
BindGlobal("GTK_STOCK_BOLD", "gtk-bold");
BindGlobal("GTK_STOCK_CANCEL", "gtk-cancel");
BindGlobal("GTK_STOCK_CDROM", "gtk-cdrom");
BindGlobal("GTK_STOCK_CLEAR", "gtk-clear");
BindGlobal("GTK_STOCK_CLOSE", "gtk-close");
BindGlobal("GTK_STOCK_COLOR_PICKER", "gtk-color-picker");
BindGlobal("GTK_STOCK_CONNECT", "gtk-connect");
BindGlobal("GTK_STOCK_CONVERT", "gtk-convert");
BindGlobal("GTK_STOCK_COPY", "gtk-copy");
BindGlobal("GTK_STOCK_CUT", "gtk-cut");
BindGlobal("GTK_STOCK_DELETE", "gtk-delete");
BindGlobal("GTK_STOCK_DIALOG_AUTHENTICATION", "gtk-dialog-authentication");
BindGlobal("GTK_STOCK_DIALOG_ERROR", "gtk-dialog-error");
BindGlobal("GTK_STOCK_DIALOG_INFO", "gtk-dialog-info");
BindGlobal("GTK_STOCK_DIALOG_QUESTION", "gtk-dialog-question");
BindGlobal("GTK_STOCK_DIALOG_WARNING", "gtk-dialog-warning");
BindGlobal("GTK_STOCK_DIRECTORY", "gtk-directory");
BindGlobal("GTK_STOCK_DISCONNECT", "gtk-disconnect");
BindGlobal("GTK_STOCK_DND", "gtk-dnd");
BindGlobal("GTK_STOCK_DND_MULTIPLE", "gtk-dnd-multiple");
BindGlobal("GTK_STOCK_EDIT", "gtk-edit");
BindGlobal("GTK_STOCK_EXECUTE", "gtk-execute");
BindGlobal("GTK_STOCK_FILE", "gtk-file");
BindGlobal("GTK_STOCK_FIND", "gtk-find");
BindGlobal("GTK_STOCK_FIND_AND_REPLACE", "gtk-find-and-replace");
BindGlobal("GTK_STOCK_FLOPPY", "gtk-floppy");
BindGlobal("GTK_STOCK_FULLSCREEN", "gtk-fullscreen");
BindGlobal("GTK_STOCK_GOTO_BOTTOM", "gtk-goto-bottom");
BindGlobal("GTK_STOCK_GOTO_FIRST", "gtk-goto-first");
BindGlobal("GTK_STOCK_GOTO_LAST", "gtk-goto-last");
BindGlobal("GTK_STOCK_GOTO_TOP", "gtk-goto-top");
BindGlobal("GTK_STOCK_GO_BACK", "gtk-go-back");
BindGlobal("GTK_STOCK_GO_DOWN", "gtk-go-down");
BindGlobal("GTK_STOCK_GO_FORWARD", "gtk-go-forward");
BindGlobal("GTK_STOCK_GO_UP", "gtk-go-up");
BindGlobal("GTK_STOCK_HARDDISK", "gtk-harddisk");
BindGlobal("GTK_STOCK_HELP", "gtk-help");
BindGlobal("GTK_STOCK_HOME", "gtk-home");
BindGlobal("GTK_STOCK_INDENT", "gtk-indent");
BindGlobal("GTK_STOCK_INDEX", "gtk-index");
BindGlobal("GTK_STOCK_INFO", "gtk-info");
BindGlobal("GTK_STOCK_ITALIC", "gtk-italic");
BindGlobal("GTK_STOCK_JUMP_TO", "gtk-jump-to");
BindGlobal("GTK_STOCK_JUSTIFY_CENTER", "gtk-justify-center");
BindGlobal("GTK_STOCK_JUSTIFY_FILL", "gtk-justify-fill");
BindGlobal("GTK_STOCK_JUSTIFY_LEFT", "gtk-justify-left");
BindGlobal("GTK_STOCK_JUSTIFY_RIGHT", "gtk-justify-right");
BindGlobal("GTK_STOCK_LEAVE_FULLSCREEN", "gtk-leave-fullscreen");
BindGlobal("GTK_STOCK_MEDIA_FORWARD", "gtk-media-forward");
BindGlobal("GTK_STOCK_MEDIA_NEXT", "gtk-media-next");
BindGlobal("GTK_STOCK_MEDIA_PAUSE", "gtk-media-pause");
BindGlobal("GTK_STOCK_MEDIA_PLAY", "gtk-media-play");
BindGlobal("GTK_STOCK_MEDIA_PREVIOUS", "gtk-media-previous");
BindGlobal("GTK_STOCK_MEDIA_RECORD", "gtk-media-record");
BindGlobal("GTK_STOCK_MEDIA_REWIND", "gtk-media-rewind");
BindGlobal("GTK_STOCK_MEDIA_STOP", "gtk-media-stop");
BindGlobal("GTK_STOCK_MISSING_IMAGE", "gtk-missing-image");
BindGlobal("GTK_STOCK_NETWORK", "gtk-network");
BindGlobal("GTK_STOCK_NEW", "gtk-new");
BindGlobal("GTK_STOCK_NO", "gtk-no");
BindGlobal("GTK_STOCK_OK", "gtk-ok");
BindGlobal("GTK_STOCK_OPEN", "gtk-open");
BindGlobal("GTK_STOCK_ORIENTATION_LANDSCAPE", "gtk-orientation-landscape");
BindGlobal("GTK_STOCK_ORIENTATION_PORTRAIT", "gtk-orientation-portrait");
BindGlobal("GTK_STOCK_ORIENTATION_REVERSE_LANDSCAPE", "gtk-orientation-reverse-landscape");
BindGlobal("GTK_STOCK_ORIENTATION_REVERSE_PORTRAIT", "gtk-orientation-reverse-portrait");
BindGlobal("GTK_STOCK_PASTE", "gtk-paste");
BindGlobal("GTK_STOCK_PREFERENCES", "gtk-preferences");
BindGlobal("GTK_STOCK_PRINT", "gtk-print");
BindGlobal("GTK_STOCK_PRINT_PREVIEW", "gtk-print-preview");
BindGlobal("GTK_STOCK_PROPERTIES", "gtk-properties");
BindGlobal("GTK_STOCK_QUIT", "gtk-quit");
BindGlobal("GTK_STOCK_REDO", "gtk-redo");
BindGlobal("GTK_STOCK_REFRESH", "gtk-refresh");
BindGlobal("GTK_STOCK_REMOVE", "gtk-remove");
BindGlobal("GTK_STOCK_REVERT_TO_SAVED", "gtk-revert-to-saved");
BindGlobal("GTK_STOCK_SAVE", "gtk-save");
BindGlobal("GTK_STOCK_SAVE_AS", "gtk-save-as");
BindGlobal("GTK_STOCK_SELECT_ALL", "gtk-select-all");
BindGlobal("GTK_STOCK_SELECT_COLOR", "gtk-select-color");
BindGlobal("GTK_STOCK_SELECT_FONT", "gtk-select-font");
BindGlobal("GTK_STOCK_SORT_ASCENDING", "gtk-sort-ascending");
BindGlobal("GTK_STOCK_SORT_DESCENDING", "gtk-sort-descending");
BindGlobal("GTK_STOCK_SPELL_CHECK", "gtk-spell-check");
BindGlobal("GTK_STOCK_STOP", "gtk-stop");
BindGlobal("GTK_STOCK_STRIKETHROUGH", "gtk-strikethrough");
BindGlobal("GTK_STOCK_UNDELETE", "gtk-undelete");
BindGlobal("GTK_STOCK_UNDERLINE", "gtk-underline");
BindGlobal("GTK_STOCK_UNDO", "gtk-undo");
BindGlobal("GTK_STOCK_UNINDENT", "gtk-unindent");
BindGlobal("GTK_STOCK_YES", "gtk-yes");
BindGlobal("GTK_STOCK_ZOOM_100", "gtk-zoom-100");
BindGlobal("GTK_STOCK_ZOOM_FIT", "gtk-zoom-fit");
BindGlobal("GTK_STOCK_ZOOM_IN", "gtk-zoom-in");
BindGlobal("GTK_STOCK_ZOOM_OUT", "gtk-zoom-out");

InstallMethod(AddAttribute, [IsGtkCellLayout, IsGtkCellRenderer, IsString, IsInt],
function(cell_layout, cell, property, column)
  local retval;
  retval := _GGAP_CALL_METH(cell_layout, "add_attribute", cell, property, column);
  return retval;
end);
InstallMethod(Clear, [IsGtkCellLayout],
function(cell_layout)
  local retval;
  retval := _GGAP_CALL_METH(cell_layout, "clear");
  return retval;
end);
InstallMethod(ClearAttributes, [IsGtkCellLayout, IsGtkCellRenderer],
function(cell_layout, cell)
  local retval;
  retval := _GGAP_CALL_METH(cell_layout, "clear_attributes", cell);
  return retval;
end);
InstallMethod(PackEnd, [IsGtkCellLayout, IsGtkCellRenderer],
function(cell_layout, cell)
  local retval;
  retval := _GGAP_CALL_METH(cell_layout, "pack_end", cell);
  return retval;
end);
InstallMethod(PackEnd, [IsGtkCellLayout, IsGtkCellRenderer, IsBool],
function(cell_layout, cell, expand)
  local retval;
  retval := _GGAP_CALL_METH(cell_layout, "pack_end", cell, expand);
  return retval;
end);
InstallMethod(PackStart, [IsGtkCellLayout, IsGtkCellRenderer],
function(cell_layout, cell)
  local retval;
  retval := _GGAP_CALL_METH(cell_layout, "pack_start", cell);
  return retval;
end);
InstallMethod(PackStart, [IsGtkCellLayout, IsGtkCellRenderer, IsBool],
function(cell_layout, cell, expand)
  local retval;
  retval := _GGAP_CALL_METH(cell_layout, "pack_start", cell, expand);
  return retval;
end);
InstallMethod(Reorder, [IsGtkCellLayout, IsGtkCellRenderer, IsInt],
function(cell_layout, cell, position)
  local retval;
  retval := _GGAP_CALL_METH(cell_layout, "reorder", cell, position);
  return retval;
end);
InstallMethod(CopyClipboard, [IsGtkEditable],
function(editable)
  local retval;
  retval := _GGAP_CALL_METH(editable, "copy_clipboard");
  return retval;
end);
InstallMethod(CutClipboard, [IsGtkEditable],
function(editable)
  local retval;
  retval := _GGAP_CALL_METH(editable, "cut_clipboard");
  return retval;
end);
InstallMethod(DeleteSelection, [IsGtkEditable],
function(editable)
  local retval;
  retval := _GGAP_CALL_METH(editable, "delete_selection");
  return retval;
end);
InstallMethod(DeleteText, [IsGtkEditable, IsInt, IsInt],
function(editable, start, end_)
  local retval;
  retval := _GGAP_CALL_METH(editable, "delete_text", start, end_);
  return retval;
end);
InstallMethod(GetText, [IsGtkEditable, IsInt, IsInt],
function(editable, start, end_)
  local retval;
  retval := _GGAP_CALL_METH(editable, "get_chars", start, end_);
  return retval;
end);
InstallMethod(GetEditable, [IsGtkEditable],
function(editable)
  local retval;
  retval := _GGAP_CALL_METH(editable, "get_editable");
  return retval;
end);
InstallMethod(GetPosition, [IsGtkEditable],
function(editable)
  local retval;
  retval := _GGAP_CALL_METH(editable, "get_position");
  return retval;
end);
InstallMethod(GetSelectionBounds, [IsGtkEditable],
function(editable)
  local retval;
  retval := _GGAP_CALL_METH(editable, "get_selection_bounds");
  return retval;
end);
InstallMethod(InsertText, [IsGtkEditable, IsString],
function(editable, text)
  local retval;
  retval := _GGAP_CALL_METH(editable, "insert_text", text);
  return retval;
end);
InstallMethod(InsertText, [IsGtkEditable, IsString, IsInt],
function(editable, text, position)
  local retval;
  retval := _GGAP_CALL_METH(editable, "insert_text", text, position);
  return retval;
end);
InstallMethod(PasteClipboard, [IsGtkEditable],
function(editable)
  local retval;
  retval := _GGAP_CALL_METH(editable, "paste_clipboard");
  return retval;
end);
InstallMethod(SelectRegion, [IsGtkEditable, IsInt, IsInt],
function(editable, start, end_)
  local retval;
  retval := _GGAP_CALL_METH(editable, "select_region", start, end_);
  return retval;
end);
InstallMethod(SetEditable, [IsGtkEditable, IsBool],
function(editable, setting)
  local retval;
  retval := _GGAP_CALL_METH(editable, "set_editable", setting);
  return retval;
end);
InstallMethod(SetPosition, [IsGtkEditable, IsInt],
function(editable, position)
  local retval;
  retval := _GGAP_CALL_METH(editable, "set_position", position);
  return retval;
end);
InstallMethod(GtkFileFilter, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.FileFilter");
  return retval;
end);
InstallMethod(AddMimeType, [IsGtkFileFilter, IsString],
function(filter, mime_type)
  local retval;
  retval := _GGAP_CALL_METH(filter, "add_mime_type", mime_type);
  return retval;
end);
InstallMethod(AddPattern, [IsGtkFileFilter, IsString],
function(filter, pattern)
  local retval;
  retval := _GGAP_CALL_METH(filter, "add_pattern", pattern);
  return retval;
end);
InstallMethod(AddPixbufFormats, [IsGtkFileFilter],
function(filter)
  local retval;
  retval := _GGAP_CALL_METH(filter, "add_pixbuf_formats");
  return retval;
end);
InstallMethod(GetFilterName, [IsGtkFileFilter],
function(filter)
  local retval;
  retval := _GGAP_CALL_METH(filter, "get_name");
  return retval;
end);
InstallMethod(GetNeeded, [IsGtkFileFilter],
function(filter)
  local retval;
  retval := _GGAP_CALL_METH(filter, "get_needed");
  return retval;
end);
InstallMethod(SetFilterName, [IsGtkFileFilter, IsString],
function(filter, name)
  local retval;
  retval := _GGAP_CALL_METH(filter, "set_name", name);
  return retval;
end);
InstallMethod(AddFilter, [IsGtkFileChooser, IsGtkFileFilter],
function(file_chooser, filter)
  local retval;
  retval := _GGAP_CALL_METH(file_chooser, "add_filter", filter);
  return retval;
end);
InstallMethod(AddShortcutFolder, [IsGtkFileChooser, IsString],
function(file_chooser, path)
  local retval;
  retval := _GGAP_CALL_METH(file_chooser, "add_shortcut_folder", path);
  return retval;
end);
InstallMethod(AddShortcutFolderUri, [IsGtkFileChooser, IsString],
function(file_chooser, uri)
  local retval;
  retval := _GGAP_CALL_METH(file_chooser, "add_shortcut_folder_uri", uri);
  return retval;
end);
InstallMethod(GetAction, [IsGtkFileChooser],
function(file_chooser)
  local retval;
  retval := _GGAP_CALL_METH(file_chooser, "get_action");
  return retval;
end);
InstallMethod(GetCurrentFolder, [IsGtkFileChooser],
function(file_chooser)
  local retval;
  retval := _GGAP_CALL_METH(file_chooser, "get_current_folder");
  return retval;
end);
InstallMethod(GetCurrentFolderUri, [IsGtkFileChooser],
function(file_chooser)
  local retval;
  retval := _GGAP_CALL_METH(file_chooser, "get_current_folder_uri");
  return retval;
end);
InstallMethod(GetDoOverwriteConfirmation, [IsGtkFileChooser],
function(file_chooser)
  local retval;
  retval := _GGAP_CALL_METH(file_chooser, "get_do_overwrite_confirmation");
  return retval;
end);
InstallMethod(GetExtraWidget, [IsGtkFileChooser],
function(file_chooser)
  local retval;
  retval := _GGAP_CALL_METH(file_chooser, "get_extra_widget");
  return retval;
end);
InstallMethod(GetFilename, [IsGtkFileChooser],
function(file_chooser)
  local retval;
  retval := _GGAP_CALL_METH(file_chooser, "get_filename");
  return retval;
end);
InstallMethod(GetFilenames, [IsGtkFileChooser],
function(file_chooser)
  local retval;
  retval := _GGAP_CALL_METH(file_chooser, "get_filenames");
  return retval;
end);
InstallMethod(GetFilter, [IsGtkFileChooser],
function(file_chooser)
  local retval;
  retval := _GGAP_CALL_METH(file_chooser, "get_filter");
  return retval;
end);
InstallMethod(GetLocalOnly, [IsGtkFileChooser],
function(file_chooser)
  local retval;
  retval := _GGAP_CALL_METH(file_chooser, "get_local_only");
  return retval;
end);
InstallMethod(GetPreviewFilename, [IsGtkFileChooser],
function(file_chooser)
  local retval;
  retval := _GGAP_CALL_METH(file_chooser, "get_preview_filename");
  return retval;
end);
InstallMethod(GetPreviewUri, [IsGtkFileChooser],
function(file_chooser)
  local retval;
  retval := _GGAP_CALL_METH(file_chooser, "get_preview_uri");
  return retval;
end);
InstallMethod(GetPreviewWidget, [IsGtkFileChooser],
function(file_chooser)
  local retval;
  retval := _GGAP_CALL_METH(file_chooser, "get_preview_widget");
  return retval;
end);
InstallMethod(GetPreviewWidgetActive, [IsGtkFileChooser],
function(file_chooser)
  local retval;
  retval := _GGAP_CALL_METH(file_chooser, "get_preview_widget_active");
  return retval;
end);
InstallMethod(GetSelectMultiple, [IsGtkFileChooser],
function(file_chooser)
  local retval;
  retval := _GGAP_CALL_METH(file_chooser, "get_select_multiple");
  return retval;
end);
InstallMethod(GetShowHidden, [IsGtkFileChooser],
function(file_chooser)
  local retval;
  retval := _GGAP_CALL_METH(file_chooser, "get_show_hidden");
  return retval;
end);
InstallMethod(GetUri, [IsGtkFileChooser],
function(file_chooser)
  local retval;
  retval := _GGAP_CALL_METH(file_chooser, "get_uri");
  return retval;
end);
InstallMethod(GetUris, [IsGtkFileChooser],
function(file_chooser)
  local retval;
  retval := _GGAP_CALL_METH(file_chooser, "get_uris");
  return retval;
end);
InstallMethod(GetUsePreviewLabel, [IsGtkFileChooser],
function(file_chooser)
  local retval;
  retval := _GGAP_CALL_METH(file_chooser, "get_use_preview_label");
  return retval;
end);
InstallMethod(ListFilters, [IsGtkFileChooser],
function(file_chooser)
  local retval;
  retval := _GGAP_CALL_METH(file_chooser, "list_filters");
  return retval;
end);
InstallMethod(ListShortcutFolderUris, [IsGtkFileChooser],
function(file_chooser)
  local retval;
  retval := _GGAP_CALL_METH(file_chooser, "list_shortcut_folder_uris");
  return retval;
end);
InstallMethod(ListShortcutFolders, [IsGtkFileChooser],
function(file_chooser)
  local retval;
  retval := _GGAP_CALL_METH(file_chooser, "list_shortcut_folders");
  return retval;
end);
InstallMethod(RemoveFilter, [IsGtkFileChooser, IsGtkFileFilter],
function(file_chooser, filter)
  local retval;
  retval := _GGAP_CALL_METH(file_chooser, "remove_filter", filter);
  return retval;
end);
InstallMethod(RemoveShortcutFolder, [IsGtkFileChooser, IsString],
function(file_chooser, path)
  local retval;
  retval := _GGAP_CALL_METH(file_chooser, "remove_shortcut_folder", path);
  return retval;
end);
InstallMethod(RemoveShortcutFolderUri, [IsGtkFileChooser, IsString],
function(file_chooser, uri)
  local retval;
  retval := _GGAP_CALL_METH(file_chooser, "remove_shortcut_folder_uri", uri);
  return retval;
end);
InstallMethod(SelectAll, [IsGtkFileChooser],
function(file_chooser)
  local retval;
  retval := _GGAP_CALL_METH(file_chooser, "select_all");
  return retval;
end);
InstallMethod(SelectFilename, [IsGtkFileChooser, IsString],
function(file_chooser, filename)
  local retval;
  retval := _GGAP_CALL_METH(file_chooser, "select_filename", filename);
  return retval;
end);
InstallMethod(SelectUri, [IsGtkFileChooser, IsString],
function(file_chooser, uri)
  local retval;
  retval := _GGAP_CALL_METH(file_chooser, "select_uri", uri);
  return retval;
end);
InstallMethod(SetAction, [IsGtkFileChooser, IsInt],
function(file_chooser, arg1)
  local retval;
  retval := _GGAP_CALL_METH(file_chooser, "set_action", arg1);
  return retval;
end);
InstallMethod(SetCurrentFolder, [IsGtkFileChooser, IsString],
function(file_chooser, path)
  local retval;
  retval := _GGAP_CALL_METH(file_chooser, "set_current_folder", path);
  return retval;
end);
InstallMethod(SetCurrentFolderUri, [IsGtkFileChooser, IsString],
function(file_chooser, uri)
  local retval;
  retval := _GGAP_CALL_METH(file_chooser, "set_current_folder_uri", uri);
  return retval;
end);
InstallMethod(SetCurrentName, [IsGtkFileChooser, IsString],
function(file_chooser, name)
  local retval;
  retval := _GGAP_CALL_METH(file_chooser, "set_current_name", name);
  return retval;
end);
InstallMethod(SetDoOverwriteConfirmation, [IsGtkFileChooser, IsBool],
function(file_chooser, setting)
  local retval;
  retval := _GGAP_CALL_METH(file_chooser, "set_do_overwrite_confirmation", setting);
  return retval;
end);
InstallMethod(SetExtraWidget, [IsGtkFileChooser, IsGtkWidget],
function(file_chooser, widget)
  local retval;
  retval := _GGAP_CALL_METH(file_chooser, "set_extra_widget", widget);
  return retval;
end);
InstallMethod(SetFilename, [IsGtkFileChooser, IsString],
function(file_chooser, filename)
  local retval;
  retval := _GGAP_CALL_METH(file_chooser, "set_filename", filename);
  return retval;
end);
InstallMethod(SetFilter, [IsGtkFileChooser, IsGtkFileFilter],
function(file_chooser, filter)
  local retval;
  retval := _GGAP_CALL_METH(file_chooser, "set_filter", filter);
  return retval;
end);
InstallMethod(SetLocalOnly, [IsGtkFileChooser, IsBool],
function(file_chooser, setting)
  local retval;
  retval := _GGAP_CALL_METH(file_chooser, "set_local_only", setting);
  return retval;
end);
InstallMethod(SetPreviewWidget, [IsGtkFileChooser, IsGtkWidget],
function(file_chooser, widget)
  local retval;
  retval := _GGAP_CALL_METH(file_chooser, "set_preview_widget", widget);
  return retval;
end);
InstallMethod(SetPreviewWidgetActive, [IsGtkFileChooser, IsBool],
function(file_chooser, active)
  local retval;
  retval := _GGAP_CALL_METH(file_chooser, "set_preview_widget_active", active);
  return retval;
end);
InstallMethod(SetSelectMultiple, [IsGtkFileChooser, IsBool],
function(file_chooser, setting)
  local retval;
  retval := _GGAP_CALL_METH(file_chooser, "set_select_multiple", setting);
  return retval;
end);
InstallMethod(SetShowHidden, [IsGtkFileChooser, IsBool],
function(file_chooser, setting)
  local retval;
  retval := _GGAP_CALL_METH(file_chooser, "set_show_hidden", setting);
  return retval;
end);
InstallMethod(SetUri, [IsGtkFileChooser, IsString],
function(file_chooser, uri)
  local retval;
  retval := _GGAP_CALL_METH(file_chooser, "set_uri", uri);
  return retval;
end);
InstallMethod(SetUsePreviewLabel, [IsGtkFileChooser, IsBool],
function(file_chooser, setting)
  local retval;
  retval := _GGAP_CALL_METH(file_chooser, "set_use_preview_label", setting);
  return retval;
end);
InstallMethod(UnselectAll, [IsGtkFileChooser],
function(file_chooser)
  local retval;
  retval := _GGAP_CALL_METH(file_chooser, "unselect_all");
  return retval;
end);
InstallMethod(UnselectFilename, [IsGtkFileChooser, IsString],
function(file_chooser, filename)
  local retval;
  retval := _GGAP_CALL_METH(file_chooser, "unselect_filename", filename);
  return retval;
end);
InstallMethod(UnselectUri, [IsGtkFileChooser, IsString],
function(file_chooser, uri)
  local retval;
  retval := _GGAP_CALL_METH(file_chooser, "unselect_uri", uri);
  return retval;
end);
InstallMethod(GetSortColumnId, [IsGtkTreeSortable],
function(tree_sortable)
  local retval;
  retval := _GGAP_CALL_METH(tree_sortable, "get_sort_column_id");
  return retval;
end);
InstallMethod(SetSortColumnId, [IsGtkTreeSortable, IsInt, IsInt],
function(tree_sortable, sort_column_id, order)
  local retval;
  retval := _GGAP_CALL_METH(tree_sortable, "set_sort_column_id", sort_column_id, order);
  return retval;
end);
InstallMethod(GetProperty, [IsGObject, IsString],
function(object, name)
  local retval;
  retval := _GGAP_CALL_METH(object, "get_property", name);
  return retval;
end);
InstallMethod(GdkDisplay, [IsString],
function(display_name)
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.gdk.Display", display_name);
  return retval;
end);
InstallMethod(Beep, [IsGdkDisplay],
function(display)
  local retval;
  retval := _GGAP_CALL_METH(display, "beep");
  return retval;
end);
InstallMethod(Close, [IsGdkDisplay],
function(display)
  local retval;
  retval := _GGAP_CALL_METH(display, "close");
  return retval;
end);
InstallMethod(GetDefaultScreen, [IsGdkDisplay],
function(display)
  local retval;
  retval := _GGAP_CALL_METH(display, "get_default_screen");
  return retval;
end);
InstallMethod(GetNScreens, [IsGdkDisplay],
function(display)
  local retval;
  retval := _GGAP_CALL_METH(display, "get_n_screens");
  return retval;
end);
InstallMethod(GetDisplayName, [IsGdkDisplay],
function(display)
  local retval;
  retval := _GGAP_CALL_METH(display, "get_name");
  return retval;
end);
InstallMethod(GetPointer, [IsGdkDisplay],
function(display)
  local retval;
  retval := _GGAP_CALL_METH(display, "get_pointer");
  return retval;
end);
InstallMethod(GetScreen, [IsGdkDisplay, IsInt],
function(display, arg1)
  local retval;
  retval := _GGAP_CALL_METH(display, "get_screen", arg1);
  return retval;
end);
InstallMethod(GetWindowAtPointer, [IsGdkDisplay],
function(display)
  local retval;
  retval := _GGAP_CALL_METH(display, "get_window_at_pointer");
  return retval;
end);
InstallMethod(GetDisplay, [IsGdkScreen],
function(screen)
  local retval;
  retval := _GGAP_CALL_METH(screen, "get_display");
  return retval;
end);
InstallMethod(GetHeight, [IsGdkScreen],
function(screen)
  local retval;
  retval := _GGAP_CALL_METH(screen, "get_height");
  return retval;
end);
InstallMethod(GetHeightMm, [IsGdkScreen],
function(screen)
  local retval;
  retval := _GGAP_CALL_METH(screen, "get_height_mm");
  return retval;
end);
InstallMethod(GetMonitorAtPoint, [IsGdkScreen, IsInt, IsInt],
function(screen, arg1, arg2)
  local retval;
  retval := _GGAP_CALL_METH(screen, "get_monitor_at_point", arg1, arg2);
  return retval;
end);
InstallMethod(GetMonitorAtWindow, [IsGdkScreen, IsGdkWindow],
function(screen, window)
  local retval;
  retval := _GGAP_CALL_METH(screen, "get_monitor_at_window", window);
  return retval;
end);
InstallMethod(GetMonitorGeometry, [IsGdkScreen, IsInt],
function(screen, arg1)
  local retval;
  retval := _GGAP_CALL_METH(screen, "get_monitor_geometry", arg1);
  return retval;
end);
InstallMethod(GetNMonitors, [IsGdkScreen],
function(screen)
  local retval;
  retval := _GGAP_CALL_METH(screen, "get_n_monitors");
  return retval;
end);
InstallMethod(GetNumber, [IsGdkScreen],
function(screen)
  local retval;
  retval := _GGAP_CALL_METH(screen, "get_number");
  return retval;
end);
InstallMethod(GetRootWindow, [IsGdkScreen],
function(screen)
  local retval;
  retval := _GGAP_CALL_METH(screen, "get_root_window");
  return retval;
end);
InstallMethod(GetToplevelWindows, [IsGdkScreen],
function(screen)
  local retval;
  retval := _GGAP_CALL_METH(screen, "get_toplevel_windows");
  return retval;
end);
InstallMethod(GetWidth, [IsGdkScreen],
function(screen)
  local retval;
  retval := _GGAP_CALL_METH(screen, "get_width");
  return retval;
end);
InstallMethod(GetWidthMm, [IsGdkScreen],
function(screen)
  local retval;
  retval := _GGAP_CALL_METH(screen, "get_width_mm");
  return retval;
end);
InstallMethod(MakeDisplayName, [IsGdkScreen],
function(screen)
  local retval;
  retval := _GGAP_CALL_METH(screen, "make_display_name");
  return retval;
end);
InstallMethod(Destroy, [IsGtkObject],
function(object)
  local retval;
  retval := _GGAP_CALL_METH(object, "destroy");
  return retval;
end);
InstallMethod(GtkAdjustment, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.Adjustment");
  return retval;
end);
InstallMethod(GtkCellRendererPixbuf, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.CellRendererPixbuf");
  return retval;
end);
InstallMethod(GtkCellRendererProgress, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.CellRendererProgress");
  return retval;
end);
InstallMethod(GtkCellRendererText, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.CellRendererText");
  return retval;
end);
InstallMethod(GtkCellRendererCombo, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.CellRendererCombo");
  return retval;
end);
InstallMethod(GtkCellRendererToggle, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.CellRendererToggle");
  return retval;
end);
InstallMethod(Activate, [IsGtkWidget],
function(widget)
  local retval;
  retval := _GGAP_CALL_METH(widget, "activate");
  return retval;
end);
InstallMethod(AddEvents, [IsGtkWidget, IsInt],
function(widget, events)
  local retval;
  retval := _GGAP_CALL_METH(widget, "add_events", events);
  return retval;
end);
InstallMethod(GetClipboard, [IsGtkWidget],
function(widget)
  local retval;
  retval := _GGAP_CALL_METH(widget, "get_clipboard");
  return retval;
end);
InstallMethod(GetDisplay, [IsGtkWidget],
function(widget)
  local retval;
  retval := _GGAP_CALL_METH(widget, "get_display");
  return retval;
end);
InstallMethod(GetEvents, [IsGtkWidget],
function(widget)
  local retval;
  retval := _GGAP_CALL_METH(widget, "get_events");
  return retval;
end);
InstallMethod(GetWidgetName, [IsGtkWidget],
function(widget)
  local retval;
  retval := _GGAP_CALL_METH(widget, "get_name");
  return retval;
end);
InstallMethod(GetParent, [IsGtkWidget],
function(widget)
  local retval;
  retval := _GGAP_CALL_METH(widget, "get_parent");
  return retval;
end);
InstallMethod(GetPointer, [IsGtkWidget],
function(widget)
  local retval;
  retval := _GGAP_CALL_METH(widget, "get_pointer");
  return retval;
end);
InstallMethod(GetRootWindow, [IsGtkWidget],
function(widget)
  local retval;
  retval := _GGAP_CALL_METH(widget, "get_root_window");
  return retval;
end);
InstallMethod(GetScreen, [IsGtkWidget],
function(widget)
  local retval;
  retval := _GGAP_CALL_METH(widget, "get_screen");
  return retval;
end);
InstallMethod(GetSettings, [IsGtkWidget],
function(widget)
  local retval;
  retval := _GGAP_CALL_METH(widget, "get_settings");
  return retval;
end);
InstallMethod(GetToplevel, [IsGtkWidget],
function(widget)
  local retval;
  retval := _GGAP_CALL_METH(widget, "get_toplevel");
  return retval;
end);
InstallMethod(GrabDefault, [IsGtkWidget],
function(widget)
  local retval;
  retval := _GGAP_CALL_METH(widget, "grab_default");
  return retval;
end);
InstallMethod(GrabFocus, [IsGtkWidget],
function(widget)
  local retval;
  retval := _GGAP_CALL_METH(widget, "grab_focus");
  return retval;
end);
InstallMethod(HasScreen, [IsGtkWidget],
function(widget)
  local retval;
  retval := _GGAP_CALL_METH(widget, "has_screen");
  return retval;
end);
InstallMethod(Hide, [IsGtkWidget],
function(widget)
  local retval;
  retval := _GGAP_CALL_METH(widget, "hide");
  return retval;
end);
InstallMethod(HideAll, [IsGtkWidget],
function(widget)
  local retval;
  retval := _GGAP_CALL_METH(widget, "hide_all");
  return retval;
end);
InstallMethod(IsAncestor, [IsGtkWidget, IsGtkWidget],
function(widget, ancestor)
  local retval;
  retval := _GGAP_CALL_METH(widget, "is_ancestor", ancestor);
  return retval;
end);
InstallMethod(IsFocus, [IsGtkWidget],
function(widget)
  local retval;
  retval := _GGAP_CALL_METH(widget, "is_focus");
  return retval;
end);
InstallMethod(ModifyFont, [IsGtkWidget, IsString],
function(widget, font)
  local retval;
  retval := _GGAP_CALL_FUNC("gap.widget_modify_font", widget, font);
  return retval;
end);
InstallMethod(Reparent, [IsGtkWidget, IsGtkWidget],
function(widget, new_parent)
  local retval;
  retval := _GGAP_CALL_METH(widget, "reparent", new_parent);
  return retval;
end);
InstallMethod(SetEvents, [IsGtkWidget, IsInt],
function(widget, events)
  local retval;
  retval := _GGAP_CALL_METH(widget, "set_events", events);
  return retval;
end);
InstallMethod(SetWidgetName, [IsGtkWidget, IsString],
function(widget, name)
  local retval;
  retval := _GGAP_CALL_METH(widget, "set_name", name);
  return retval;
end);
InstallMethod(SetScrollAdjustments, [IsGtkWidget, IsGtkAdjustment, IsGtkAdjustment],
function(widget, hadjustment, vadjustment)
  local retval;
  retval := _GGAP_CALL_METH(widget, "set_scroll_adjustments", hadjustment, vadjustment);
  return retval;
end);
InstallMethod(SetSensitive, [IsGtkWidget, IsBool],
function(widget, sensitive)
  local retval;
  retval := _GGAP_CALL_METH(widget, "set_sensitive", sensitive);
  return retval;
end);
InstallMethod(SetSizeRequest, [IsGtkWidget, IsInt, IsInt],
function(widget, width, height)
  local retval;
  retval := _GGAP_CALL_METH(widget, "set_size_request", width, height);
  return retval;
end);
InstallMethod(SetState, [IsGtkWidget, IsInt],
function(widget, arg1)
  local retval;
  retval := _GGAP_CALL_METH(widget, "set_state", arg1);
  return retval;
end);
InstallMethod(Show, [IsGtkWidget],
function(widget)
  local retval;
  retval := _GGAP_CALL_METH(widget, "show");
  return retval;
end);
InstallMethod(ShowAll, [IsGtkWidget],
function(widget)
  local retval;
  retval := _GGAP_CALL_METH(widget, "show_all");
  return retval;
end);
InstallMethod(ShowNow, [IsGtkWidget],
function(widget)
  local retval;
  retval := _GGAP_CALL_METH(widget, "show_now");
  return retval;
end);
InstallMethod(GtkCalendar, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.Calendar");
  return retval;
end);
InstallMethod(Add, [IsGtkContainer, IsGtkWidget],
function(container, widget)
  local retval;
  retval := _GGAP_CALL_METH(container, "add", widget);
  return retval;
end);
InstallMethod(CheckResize, [IsGtkContainer],
function(container)
  local retval;
  retval := _GGAP_CALL_METH(container, "check_resize");
  return retval;
end);
InstallMethod(ChildGetProperty, [IsGtkContainer, IsGtkWidget, IsString],
function(container, widget, name)
  local retval;
  retval := _GGAP_CALL_METH(container, "child_get_property", widget, name);
  return retval;
end);
InstallMethod(ChildSetProperty, [IsGtkContainer, IsGtkWidget, IsString, IsObject],
function(container, widget, name, arg3)
  local retval;
  retval := _GGAP_CALL_METH(container, "child_set_property", widget, name, arg3);
  return retval;
end);
InstallMethod(GetBorderWidth, [IsGtkContainer],
function(container)
  local retval;
  retval := _GGAP_CALL_METH(container, "get_border_width");
  return retval;
end);
InstallMethod(GetChildren, [IsGtkContainer],
function(container)
  local retval;
  retval := _GGAP_CALL_METH(container, "get_children");
  return retval;
end);
InstallMethod(GetFocusChain, [IsGtkContainer],
function(container)
  local retval;
  retval := _GGAP_CALL_METH(container, "get_focus_chain");
  return retval;
end);
InstallMethod(GetResizeMode, [IsGtkContainer],
function(container)
  local retval;
  retval := _GGAP_CALL_METH(container, "get_resize_mode");
  return retval;
end);
InstallMethod(Remove, [IsGtkContainer, IsGtkWidget],
function(container, widget)
  local retval;
  retval := _GGAP_CALL_METH(container, "remove", widget);
  return retval;
end);
InstallMethod(SetBorderWidth, [IsGtkContainer, IsInt],
function(container, arg1)
  local retval;
  retval := _GGAP_CALL_METH(container, "set_border_width", arg1);
  return retval;
end);
InstallMethod(SetFocusChain, [IsGtkContainer, IsList],
function(container, arg1)
  local retval;
  retval := _GGAP_CALL_METH(container, "set_focus_chain", arg1);
  return retval;
end);
InstallMethod(SetResizeMode, [IsGtkContainer, IsInt],
function(container, arg1)
  local retval;
  retval := _GGAP_CALL_METH(container, "set_resize_mode", arg1);
  return retval;
end);
InstallMethod(UnsetFocusChain, [IsGtkContainer],
function(container)
  local retval;
  retval := _GGAP_CALL_METH(container, "unset_focus_chain");
  return retval;
end);
InstallMethod(GetChild, [IsGtkBin],
function(bin)
  local retval;
  retval := _GGAP_CALL_METH(bin, "get_child");
  return retval;
end);
InstallMethod(GtkAlignment, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.Alignment");
  return retval;
end);
InstallMethod(GtkAlignment, [IsRat],
function(xalign)
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.Alignment", xalign);
  return retval;
end);
InstallMethod(GtkAlignment, [IsRat, IsRat],
function(xalign, yalign)
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.Alignment", xalign, yalign);
  return retval;
end);
InstallMethod(GtkAlignment, [IsRat, IsRat, IsRat],
function(xalign, yalign, xscale)
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.Alignment", xalign, yalign, xscale);
  return retval;
end);
InstallMethod(GtkAlignment, [IsRat, IsRat, IsRat, IsRat],
function(xalign, yalign, xscale, yscale)
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.Alignment", xalign, yalign, xscale, yscale);
  return retval;
end);
InstallMethod(GetPadding, [IsGtkAlignment],
function(alignment)
  local retval;
  retval := _GGAP_CALL_METH(alignment, "get_padding");
  return retval;
end);
InstallMethod(SetValues, [IsGtkAlignment, IsRat, IsRat, IsRat, IsRat],
function(alignment, xalign, yalign, xscale, yscale)
  local retval;
  retval := _GGAP_CALL_METH(alignment, "set", xalign, yalign, xscale, yscale);
  return retval;
end);
InstallMethod(SetPadding, [IsGtkAlignment, IsInt, IsInt, IsInt, IsInt],
function(alignment, top, bottom, left, right)
  local retval;
  retval := _GGAP_CALL_METH(alignment, "set_padding", top, bottom, left, right);
  return retval;
end);
InstallMethod(Clicked, [IsGtkButton],
function(button)
  local retval;
  retval := _GGAP_CALL_METH(button, "clicked");
  return retval;
end);
InstallMethod(Enter, [IsGtkButton],
function(button)
  local retval;
  retval := _GGAP_CALL_METH(button, "enter");
  return retval;
end);
InstallMethod(GetAlignment, [IsGtkButton],
function(button)
  local retval;
  retval := _GGAP_CALL_METH(button, "get_alignment");
  return retval;
end);
InstallMethod(GetFocusOnClick, [IsGtkButton],
function(button)
  local retval;
  retval := _GGAP_CALL_METH(button, "get_focus_on_click");
  return retval;
end);
InstallMethod(GetImage, [IsGtkButton],
function(button)
  local retval;
  retval := _GGAP_CALL_METH(button, "get_image");
  return retval;
end);
InstallMethod(GetLabel, [IsGtkButton],
function(button)
  local retval;
  retval := _GGAP_CALL_METH(button, "get_label");
  return retval;
end);
InstallMethod(GetRelief, [IsGtkButton],
function(button)
  local retval;
  retval := _GGAP_CALL_METH(button, "get_relief");
  return retval;
end);
InstallMethod(GetUseStock, [IsGtkButton],
function(button)
  local retval;
  retval := _GGAP_CALL_METH(button, "get_use_stock");
  return retval;
end);
InstallMethod(GetUseUnderline, [IsGtkButton],
function(button)
  local retval;
  retval := _GGAP_CALL_METH(button, "get_use_underline");
  return retval;
end);
InstallMethod(Leave, [IsGtkButton],
function(button)
  local retval;
  retval := _GGAP_CALL_METH(button, "leave");
  return retval;
end);
InstallMethod(Pressed, [IsGtkButton],
function(button)
  local retval;
  retval := _GGAP_CALL_METH(button, "pressed");
  return retval;
end);
InstallMethod(Released, [IsGtkButton],
function(button)
  local retval;
  retval := _GGAP_CALL_METH(button, "released");
  return retval;
end);
InstallMethod(SetAlignment, [IsGtkButton, IsRat, IsRat],
function(button, xalign, yalign)
  local retval;
  retval := _GGAP_CALL_METH(button, "set_alignment", xalign, yalign);
  return retval;
end);
InstallMethod(SetFocusOnClick, [IsGtkButton, IsBool],
function(button, setting)
  local retval;
  retval := _GGAP_CALL_METH(button, "set_focus_on_click", setting);
  return retval;
end);
InstallMethod(SetImage, [IsGtkButton, IsGtkWidget],
function(button, widget)
  local retval;
  retval := _GGAP_CALL_METH(button, "set_image", widget);
  return retval;
end);
InstallMethod(SetLabel, [IsGtkButton, IsString],
function(button, label)
  local retval;
  retval := _GGAP_CALL_METH(button, "set_label", label);
  return retval;
end);
InstallMethod(SetRelief, [IsGtkButton, IsInt],
function(button, arg1)
  local retval;
  retval := _GGAP_CALL_METH(button, "set_relief", arg1);
  return retval;
end);
InstallMethod(SetUseStock, [IsGtkButton, IsBool],
function(button, setting)
  local retval;
  retval := _GGAP_CALL_METH(button, "set_use_stock", setting);
  return retval;
end);
InstallMethod(SetUseUnderline, [IsGtkButton, IsBool],
function(button, setting)
  local retval;
  retval := _GGAP_CALL_METH(button, "set_use_underline", setting);
  return retval;
end);
InstallMethod(GtkColorButton, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.ColorButton");
  return retval;
end);
InstallMethod(GetTitle, [IsGtkColorButton],
function(color_button)
  local retval;
  retval := _GGAP_CALL_METH(color_button, "get_title");
  return retval;
end);
InstallMethod(SetTitle, [IsGtkColorButton, IsString],
function(color_button, title)
  local retval;
  retval := _GGAP_CALL_METH(color_button, "set_title", title);
  return retval;
end);
InstallMethod(GtkFontButton, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.FontButton");
  return retval;
end);
InstallMethod(GtkFontButton, [IsString],
function(font)
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.FontButton", font);
  return retval;
end);
InstallMethod(GetFontName, [IsGtkFontButton],
function(font_button)
  local retval;
  retval := _GGAP_CALL_METH(font_button, "get_font_name");
  return retval;
end);
InstallMethod(GetShowSize, [IsGtkFontButton],
function(font_button)
  local retval;
  retval := _GGAP_CALL_METH(font_button, "get_show_size");
  return retval;
end);
InstallMethod(GetShowStyle, [IsGtkFontButton],
function(font_button)
  local retval;
  retval := _GGAP_CALL_METH(font_button, "get_show_style");
  return retval;
end);
InstallMethod(GetTitle, [IsGtkFontButton],
function(font_button)
  local retval;
  retval := _GGAP_CALL_METH(font_button, "get_title");
  return retval;
end);
InstallMethod(GetUseFont, [IsGtkFontButton],
function(font_button)
  local retval;
  retval := _GGAP_CALL_METH(font_button, "get_use_font");
  return retval;
end);
InstallMethod(GetUseSize, [IsGtkFontButton],
function(font_button)
  local retval;
  retval := _GGAP_CALL_METH(font_button, "get_use_size");
  return retval;
end);
InstallMethod(SetFontName, [IsGtkFontButton, IsString],
function(font_button, font)
  local retval;
  retval := _GGAP_CALL_METH(font_button, "set_font_name", font);
  return retval;
end);
InstallMethod(SetShowSize, [IsGtkFontButton, IsBool],
function(font_button, setting)
  local retval;
  retval := _GGAP_CALL_METH(font_button, "set_show_size", setting);
  return retval;
end);
InstallMethod(SetShowStyle, [IsGtkFontButton, IsBool],
function(font_button, setting)
  local retval;
  retval := _GGAP_CALL_METH(font_button, "set_show_style", setting);
  return retval;
end);
InstallMethod(SetTitle, [IsGtkFontButton, IsString],
function(font_button, window_title)
  local retval;
  retval := _GGAP_CALL_METH(font_button, "set_title", window_title);
  return retval;
end);
InstallMethod(SetUseFont, [IsGtkFontButton, IsBool],
function(font_button, setting)
  local retval;
  retval := _GGAP_CALL_METH(font_button, "set_use_font", setting);
  return retval;
end);
InstallMethod(SetUseSize, [IsGtkFontButton, IsBool],
function(font_button, setting)
  local retval;
  retval := _GGAP_CALL_METH(font_button, "set_use_size", setting);
  return retval;
end);
InstallMethod(GtkToggleButton, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.ToggleButton");
  return retval;
end);
InstallMethod(GtkToggleButton, [IsString],
function(label)
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.ToggleButton", label);
  return retval;
end);
InstallMethod(GtkToggleButton, [IsString, IsBool],
function(label, use_underline)
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.ToggleButton", label, use_underline);
  return retval;
end);
InstallMethod(GetActive, [IsGtkToggleButton],
function(toggle_button)
  local retval;
  retval := _GGAP_CALL_METH(toggle_button, "get_active");
  return retval;
end);
InstallMethod(GetInconsistent, [IsGtkToggleButton],
function(toggle_button)
  local retval;
  retval := _GGAP_CALL_METH(toggle_button, "get_inconsistent");
  return retval;
end);
InstallMethod(GetMode, [IsGtkToggleButton],
function(toggle_button)
  local retval;
  retval := _GGAP_CALL_METH(toggle_button, "get_mode");
  return retval;
end);
InstallMethod(SetActive, [IsGtkToggleButton, IsBool],
function(toggle_button, active)
  local retval;
  retval := _GGAP_CALL_METH(toggle_button, "set_active", active);
  return retval;
end);
InstallMethod(SetInconsistent, [IsGtkToggleButton, IsBool],
function(toggle_button, setting)
  local retval;
  retval := _GGAP_CALL_METH(toggle_button, "set_inconsistent", setting);
  return retval;
end);
InstallMethod(SetMode, [IsGtkToggleButton, IsBool],
function(toggle_button, draw_indicator)
  local retval;
  retval := _GGAP_CALL_METH(toggle_button, "set_mode", draw_indicator);
  return retval;
end);
InstallMethod(Toggled, [IsGtkToggleButton],
function(toggle_button)
  local retval;
  retval := _GGAP_CALL_METH(toggle_button, "toggled");
  return retval;
end);
InstallMethod(GtkCheckButton, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.CheckButton");
  return retval;
end);
InstallMethod(GtkCheckButton, [IsString],
function(label)
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.CheckButton", label);
  return retval;
end);
InstallMethod(GtkCheckButton, [IsString, IsBool],
function(label, use_underline)
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.CheckButton", label, use_underline);
  return retval;
end);
InstallMethod(GtkRadioButton, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.RadioButton");
  return retval;
end);
InstallMethod(GtkComboBox, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.combo_box_new_text");
  return retval;
end);
InstallMethod(AppendText, [IsGtkComboBox, IsString],
function(combo_box, text)
  local retval;
  retval := _GGAP_CALL_METH(combo_box, "append_text", text);
  return retval;
end);
InstallMethod(GetActive, [IsGtkComboBox],
function(combo_box)
  local retval;
  retval := _GGAP_CALL_METH(combo_box, "get_active");
  return retval + 1;
end);
InstallMethod(GetActiveText, [IsGtkComboBox],
function(combo_box)
  local retval;
  retval := _GGAP_CALL_METH(combo_box, "get_active_text");
  return retval;
end);
InstallMethod(GetColumnSpanColumn, [IsGtkComboBox],
function(combo_box)
  local retval;
  retval := _GGAP_CALL_METH(combo_box, "get_column_span_column");
  return retval;
end);
InstallMethod(GetFocusOnClick, [IsGtkComboBox],
function(combo_box)
  local retval;
  retval := _GGAP_CALL_METH(combo_box, "get_focus_on_click");
  return retval;
end);
InstallMethod(GetModel, [IsGtkComboBox],
function(combo_box)
  local retval;
  retval := _GGAP_CALL_METH(combo_box, "get_model");
  return retval;
end);
InstallMethod(GetRowSpanColumn, [IsGtkComboBox],
function(combo_box)
  local retval;
  retval := _GGAP_CALL_METH(combo_box, "get_row_span_column");
  return retval;
end);
InstallMethod(GetWrapWidth, [IsGtkComboBox],
function(combo_box)
  local retval;
  retval := _GGAP_CALL_METH(combo_box, "get_wrap_width");
  return retval;
end);
InstallMethod(InsertText, [IsGtkComboBox, IsInt, IsString],
function(combo_box, index, text)
  local retval;
  index := index - 1;
  retval := _GGAP_CALL_METH(combo_box, "insert_text", index, text);
  return retval;
end);
InstallMethod(Popdown, [IsGtkComboBox],
function(combo_box)
  local retval;
  retval := _GGAP_CALL_METH(combo_box, "popdown");
  return retval;
end);
InstallMethod(Popup, [IsGtkComboBox],
function(combo_box)
  local retval;
  retval := _GGAP_CALL_METH(combo_box, "popup");
  return retval;
end);
InstallMethod(PrependText, [IsGtkComboBox, IsString],
function(combo_box, text)
  local retval;
  retval := _GGAP_CALL_METH(combo_box, "prepend_text", text);
  return retval;
end);
InstallMethod(RemoveText, [IsGtkComboBox, IsInt],
function(combo_box, index)
  local retval;
  index := index - 1;
  retval := _GGAP_CALL_METH(combo_box, "remove_text", index);
  return retval;
end);
InstallMethod(SetActive, [IsGtkComboBox, IsInt],
function(combo_box, active)
  local retval;
  active := active - 1;
  retval := _GGAP_CALL_METH(combo_box, "set_active", active);
  return retval;
end);
InstallMethod(SetColumnSpanColumn, [IsGtkComboBox, IsInt],
function(combo_box, arg1)
  local retval;
  retval := _GGAP_CALL_METH(combo_box, "set_column_span_column", arg1);
  return retval;
end);
InstallMethod(SetFocusOnClick, [IsGtkComboBox, IsBool],
function(combo_box, setting)
  local retval;
  retval := _GGAP_CALL_METH(combo_box, "set_focus_on_click", setting);
  return retval;
end);
InstallMethod(SetModel, [IsGtkComboBox, IsGtkTreeModel],
function(combo_box, tree_model)
  local retval;
  retval := _GGAP_CALL_METH(combo_box, "set_model", tree_model);
  return retval;
end);
InstallMethod(SetRowSpanColumn, [IsGtkComboBox, IsInt],
function(combo_box, arg1)
  local retval;
  retval := _GGAP_CALL_METH(combo_box, "set_row_span_column", arg1);
  return retval;
end);
InstallMethod(SetWrapWidth, [IsGtkComboBox, IsInt],
function(combo_box, arg1)
  local retval;
  retval := _GGAP_CALL_METH(combo_box, "set_wrap_width", arg1);
  return retval;
end);
InstallMethod(GtkComboBoxEntry, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.combo_box_entry_new_text");
  return retval;
end);
InstallMethod(GetTextColumn, [IsGtkComboBoxEntry],
function(combo_box_entry)
  local retval;
  retval := _GGAP_CALL_METH(combo_box_entry, "get_text_column");
  return retval;
end);
InstallMethod(SetTextColumn, [IsGtkComboBoxEntry, IsInt],
function(combo_box_entry, arg1)
  local retval;
  retval := _GGAP_CALL_METH(combo_box_entry, "set_text_column", arg1);
  return retval;
end);
InstallMethod(GtkEventBox, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.EventBox");
  return retval;
end);
InstallMethod(GetAboveChild, [IsGtkEventBox],
function(event_box)
  local retval;
  retval := _GGAP_CALL_METH(event_box, "get_above_child");
  return retval;
end);
InstallMethod(GetVisibleWindow, [IsGtkEventBox],
function(event_box)
  local retval;
  retval := _GGAP_CALL_METH(event_box, "get_visible_window");
  return retval;
end);
InstallMethod(SetAboveChild, [IsGtkEventBox, IsBool],
function(event_box, setting)
  local retval;
  retval := _GGAP_CALL_METH(event_box, "set_above_child", setting);
  return retval;
end);
InstallMethod(SetVisibleWindow, [IsGtkEventBox, IsBool],
function(event_box, setting)
  local retval;
  retval := _GGAP_CALL_METH(event_box, "set_visible_window", setting);
  return retval;
end);
InstallMethod(GtkExpander, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.Expander");
  return retval;
end);
InstallMethod(GtkExpander, [IsString],
function(label)
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.Expander", label);
  return retval;
end);
InstallMethod(GetExpanded, [IsGtkExpander],
function(expander)
  local retval;
  retval := _GGAP_CALL_METH(expander, "get_expanded");
  return retval;
end);
InstallMethod(GetLabel, [IsGtkExpander],
function(expander)
  local retval;
  retval := _GGAP_CALL_METH(expander, "get_label");
  return retval;
end);
InstallMethod(GetLabelWidget, [IsGtkExpander],
function(expander)
  local retval;
  retval := _GGAP_CALL_METH(expander, "get_label_widget");
  return retval;
end);
InstallMethod(GetSpacing, [IsGtkExpander],
function(expander)
  local retval;
  retval := _GGAP_CALL_METH(expander, "get_spacing");
  return retval;
end);
InstallMethod(GetUseMarkup, [IsGtkExpander],
function(expander)
  local retval;
  retval := _GGAP_CALL_METH(expander, "get_use_markup");
  return retval;
end);
InstallMethod(GetUseUnderline, [IsGtkExpander],
function(expander)
  local retval;
  retval := _GGAP_CALL_METH(expander, "get_use_underline");
  return retval;
end);
InstallMethod(SetExpanded, [IsGtkExpander, IsBool],
function(expander, expanded)
  local retval;
  retval := _GGAP_CALL_METH(expander, "set_expanded", expanded);
  return retval;
end);
InstallMethod(SetLabel, [IsGtkExpander, IsString],
function(expander, label)
  local retval;
  retval := _GGAP_CALL_METH(expander, "set_label", label);
  return retval;
end);
InstallMethod(SetLabelWidget, [IsGtkExpander, IsGtkWidget],
function(expander, widget)
  local retval;
  retval := _GGAP_CALL_METH(expander, "set_label_widget", widget);
  return retval;
end);
InstallMethod(SetSpacing, [IsGtkExpander, IsInt],
function(expander, arg1)
  local retval;
  retval := _GGAP_CALL_METH(expander, "set_spacing", arg1);
  return retval;
end);
InstallMethod(SetUseMarkup, [IsGtkExpander, IsBool],
function(expander, setting)
  local retval;
  retval := _GGAP_CALL_METH(expander, "set_use_markup", setting);
  return retval;
end);
InstallMethod(SetUseUnderline, [IsGtkExpander, IsBool],
function(expander, setting)
  local retval;
  retval := _GGAP_CALL_METH(expander, "set_use_underline", setting);
  return retval;
end);
InstallMethod(GtkFrame, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.Frame");
  return retval;
end);
InstallMethod(GetLabel, [IsGtkFrame],
function(frame)
  local retval;
  retval := _GGAP_CALL_METH(frame, "get_label");
  return retval;
end);
InstallMethod(GetLabelAlign, [IsGtkFrame],
function(frame)
  local retval;
  retval := _GGAP_CALL_METH(frame, "get_label_align");
  return retval;
end);
InstallMethod(GetLabelWidget, [IsGtkFrame],
function(frame)
  local retval;
  retval := _GGAP_CALL_METH(frame, "get_label_widget");
  return retval;
end);
InstallMethod(GetShadowType, [IsGtkFrame],
function(frame)
  local retval;
  retval := _GGAP_CALL_METH(frame, "get_shadow_type");
  return retval;
end);
InstallMethod(SetLabel, [IsGtkFrame, IsString],
function(frame, label)
  local retval;
  retval := _GGAP_CALL_METH(frame, "set_label", label);
  return retval;
end);
InstallMethod(SetLabelAlign, [IsGtkFrame, IsRat, IsRat],
function(frame, xalign, yalign)
  local retval;
  retval := _GGAP_CALL_METH(frame, "set_label_align", xalign, yalign);
  return retval;
end);
InstallMethod(SetLabelWidget, [IsGtkFrame, IsGtkWidget],
function(frame, widget)
  local retval;
  retval := _GGAP_CALL_METH(frame, "set_label_widget", widget);
  return retval;
end);
InstallMethod(SetShadowType, [IsGtkFrame, IsInt],
function(frame, arg1)
  local retval;
  retval := _GGAP_CALL_METH(frame, "set_shadow_type", arg1);
  return retval;
end);
InstallMethod(GtkAspectFrame, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.AspectFrame");
  return retval;
end);
InstallMethod(SetValues, [IsGtkAspectFrame, IsRat, IsRat, IsRat, IsBool],
function(frame, xalign, yalign, ratio, arg4)
  local retval;
  retval := _GGAP_CALL_METH(frame, "set", xalign, yalign, ratio, arg4);
  return retval;
end);
InstallMethod(GtkHandleBox, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.HandleBox");
  return retval;
end);
InstallMethod(GetHandlePosition, [IsGtkHandleBox],
function(handle_box)
  local retval;
  retval := _GGAP_CALL_METH(handle_box, "get_handle_position");
  return retval;
end);
InstallMethod(GetShadowType, [IsGtkHandleBox],
function(handle_box)
  local retval;
  retval := _GGAP_CALL_METH(handle_box, "get_shadow_type");
  return retval;
end);
InstallMethod(GetSnapEdge, [IsGtkHandleBox],
function(handle_box)
  local retval;
  retval := _GGAP_CALL_METH(handle_box, "get_snap_edge");
  return retval;
end);
InstallMethod(SetHandlePosition, [IsGtkHandleBox, IsInt],
function(handle_box, arg1)
  local retval;
  retval := _GGAP_CALL_METH(handle_box, "set_handle_position", arg1);
  return retval;
end);
InstallMethod(SetShadowType, [IsGtkHandleBox, IsInt],
function(handle_box, arg1)
  local retval;
  retval := _GGAP_CALL_METH(handle_box, "set_shadow_type", arg1);
  return retval;
end);
InstallMethod(SetSnapEdge, [IsGtkHandleBox, IsInt],
function(handle_box, arg1)
  local retval;
  retval := _GGAP_CALL_METH(handle_box, "set_snap_edge", arg1);
  return retval;
end);
InstallMethod(GtkMenuItem, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.MenuItem");
  return retval;
end);
InstallMethod(GtkMenuItem, [IsString],
function(label)
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.MenuItem", label);
  return retval;
end);
InstallMethod(GtkMenuItem, [IsString, IsBool],
function(label, use_underline)
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.MenuItem", label, use_underline);
  return retval;
end);
InstallMethod(Deselect, [IsGtkMenuItem],
function(menu_item)
  local retval;
  retval := _GGAP_CALL_METH(menu_item, "deselect");
  return retval;
end);
InstallMethod(GetRightJustified, [IsGtkMenuItem],
function(menu_item)
  local retval;
  retval := _GGAP_CALL_METH(menu_item, "get_right_justified");
  return retval;
end);
InstallMethod(GetSubmenu, [IsGtkMenuItem],
function(menu_item)
  local retval;
  retval := _GGAP_CALL_METH(menu_item, "get_submenu");
  return retval;
end);
InstallMethod(RemoveSubmenu, [IsGtkMenuItem],
function(menu_item)
  local retval;
  retval := _GGAP_CALL_METH(menu_item, "remove_submenu");
  return retval;
end);
InstallMethod(Select, [IsGtkMenuItem],
function(menu_item)
  local retval;
  retval := _GGAP_CALL_METH(menu_item, "select");
  return retval;
end);
InstallMethod(SetAccelPath, [IsGtkMenuItem, IsString],
function(menu_item, arg1)
  local retval;
  retval := _GGAP_CALL_METH(menu_item, "set_accel_path", arg1);
  return retval;
end);
InstallMethod(SetRightJustified, [IsGtkMenuItem, IsBool],
function(menu_item, setting)
  local retval;
  retval := _GGAP_CALL_METH(menu_item, "set_right_justified", setting);
  return retval;
end);
InstallMethod(SetSubmenu, [IsGtkMenuItem, IsGtkWidget],
function(menu_item, widget)
  local retval;
  retval := _GGAP_CALL_METH(menu_item, "set_submenu", widget);
  return retval;
end);
InstallMethod(GtkCheckMenuItem, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.CheckMenuItem");
  return retval;
end);
InstallMethod(GtkCheckMenuItem, [IsString],
function(label)
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.CheckMenuItem", label);
  return retval;
end);
InstallMethod(GtkCheckMenuItem, [IsString, IsBool],
function(label, use_underline)
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.CheckMenuItem", label, use_underline);
  return retval;
end);
InstallMethod(GetActive, [IsGtkCheckMenuItem],
function(menu_item)
  local retval;
  retval := _GGAP_CALL_METH(menu_item, "get_active");
  return retval;
end);
InstallMethod(GetDrawAsRadio, [IsGtkCheckMenuItem],
function(menu_item)
  local retval;
  retval := _GGAP_CALL_METH(menu_item, "get_draw_as_radio");
  return retval;
end);
InstallMethod(GetInconsistent, [IsGtkCheckMenuItem],
function(menu_item)
  local retval;
  retval := _GGAP_CALL_METH(menu_item, "get_inconsistent");
  return retval;
end);
InstallMethod(SetActive, [IsGtkCheckMenuItem, IsBool],
function(menu_item, active)
  local retval;
  retval := _GGAP_CALL_METH(menu_item, "set_active", active);
  return retval;
end);
InstallMethod(SetDrawAsRadio, [IsGtkCheckMenuItem, IsBool],
function(menu_item, setting)
  local retval;
  retval := _GGAP_CALL_METH(menu_item, "set_draw_as_radio", setting);
  return retval;
end);
InstallMethod(SetInconsistent, [IsGtkCheckMenuItem, IsBool],
function(menu_item, setting)
  local retval;
  retval := _GGAP_CALL_METH(menu_item, "set_inconsistent", setting);
  return retval;
end);
InstallMethod(SetShowToggle, [IsGtkCheckMenuItem, IsBool],
function(menu_item, setting)
  local retval;
  retval := _GGAP_CALL_METH(menu_item, "set_show_toggle", setting);
  return retval;
end);
InstallMethod(Toggled, [IsGtkCheckMenuItem],
function(menu_item)
  local retval;
  retval := _GGAP_CALL_METH(menu_item, "toggled");
  return retval;
end);
InstallMethod(GtkRadioMenuItem, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.RadioMenuItem");
  return retval;
end);
InstallMethod(GtkImageMenuItem, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.ImageMenuItem");
  return retval;
end);
InstallMethod(GetImage, [IsGtkImageMenuItem],
function(menu_item)
  local retval;
  retval := _GGAP_CALL_METH(menu_item, "get_image");
  return retval;
end);
InstallMethod(SetImage, [IsGtkImageMenuItem, IsGtkWidget],
function(menu_item, widget)
  local retval;
  retval := _GGAP_CALL_METH(menu_item, "set_image", widget);
  return retval;
end);
InstallMethod(GtkSeparatorMenuItem, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.SeparatorMenuItem");
  return retval;
end);
InstallMethod(GtkTearoffMenuItem, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.TearoffMenuItem");
  return retval;
end);
InstallMethod(GtkPlug, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.Plug");
  return retval;
end);
InstallMethod(GtkScrolledWindow, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.ScrolledWindow");
  return retval;
end);
InstallMethod(AddWithViewport, [IsGtkScrolledWindow, IsGtkWidget],
function(scrolled_window, widget)
  local retval;
  retval := _GGAP_CALL_METH(scrolled_window, "add_with_viewport", widget);
  return retval;
end);
InstallMethod(GetHadjustment, [IsGtkScrolledWindow],
function(scrolled_window)
  local retval;
  retval := _GGAP_CALL_METH(scrolled_window, "get_hadjustment");
  return retval;
end);
InstallMethod(GetHscrollbar, [IsGtkScrolledWindow],
function(scrolled_window)
  local retval;
  retval := _GGAP_CALL_METH(scrolled_window, "get_hscrollbar");
  return retval;
end);
InstallMethod(GetPlacement, [IsGtkScrolledWindow],
function(scrolled_window)
  local retval;
  retval := _GGAP_CALL_METH(scrolled_window, "get_placement");
  return retval;
end);
InstallMethod(GetPolicy, [IsGtkScrolledWindow],
function(scrolled_window)
  local retval;
  retval := _GGAP_CALL_METH(scrolled_window, "get_policy");
  return retval;
end);
InstallMethod(GetShadowType, [IsGtkScrolledWindow],
function(scrolled_window)
  local retval;
  retval := _GGAP_CALL_METH(scrolled_window, "get_shadow_type");
  return retval;
end);
InstallMethod(GetVadjustment, [IsGtkScrolledWindow],
function(scrolled_window)
  local retval;
  retval := _GGAP_CALL_METH(scrolled_window, "get_vadjustment");
  return retval;
end);
InstallMethod(GetVscrollbar, [IsGtkScrolledWindow],
function(scrolled_window)
  local retval;
  retval := _GGAP_CALL_METH(scrolled_window, "get_vscrollbar");
  return retval;
end);
InstallMethod(SetHadjustment, [IsGtkScrolledWindow, IsGtkAdjustment],
function(scrolled_window, adjustment)
  local retval;
  retval := _GGAP_CALL_METH(scrolled_window, "set_hadjustment", adjustment);
  return retval;
end);
InstallMethod(SetPlacement, [IsGtkScrolledWindow, IsInt],
function(scrolled_window, arg1)
  local retval;
  retval := _GGAP_CALL_METH(scrolled_window, "set_placement", arg1);
  return retval;
end);
InstallMethod(SetPolicy, [IsGtkScrolledWindow, IsInt, IsInt],
function(scrolled_window, arg1, arg2)
  local retval;
  retval := _GGAP_CALL_METH(scrolled_window, "set_policy", arg1, arg2);
  return retval;
end);
InstallMethod(SetShadowType, [IsGtkScrolledWindow, IsInt],
function(scrolled_window, arg1)
  local retval;
  retval := _GGAP_CALL_METH(scrolled_window, "set_shadow_type", arg1);
  return retval;
end);
InstallMethod(SetVadjustment, [IsGtkScrolledWindow, IsGtkAdjustment],
function(scrolled_window, adjustment)
  local retval;
  retval := _GGAP_CALL_METH(scrolled_window, "set_vadjustment", adjustment);
  return retval;
end);
InstallMethod(GtkToolItem, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.ToolItem");
  return retval;
end);
InstallMethod(GetExpand, [IsGtkToolItem],
function(tool_item)
  local retval;
  retval := _GGAP_CALL_METH(tool_item, "get_expand");
  return retval;
end);
InstallMethod(GetHomogeneous, [IsGtkToolItem],
function(tool_item)
  local retval;
  retval := _GGAP_CALL_METH(tool_item, "get_homogeneous");
  return retval;
end);
InstallMethod(GetIconSize, [IsGtkToolItem],
function(tool_item)
  local retval;
  retval := _GGAP_CALL_METH(tool_item, "get_icon_size");
  return retval;
end);
InstallMethod(GetIsImportant, [IsGtkToolItem],
function(tool_item)
  local retval;
  retval := _GGAP_CALL_METH(tool_item, "get_is_important");
  return retval;
end);
InstallMethod(GetOrientation, [IsGtkToolItem],
function(tool_item)
  local retval;
  retval := _GGAP_CALL_METH(tool_item, "get_orientation");
  return retval;
end);
InstallMethod(GetProxyMenuItem, [IsGtkToolItem, IsString],
function(tool_item, arg1)
  local retval;
  retval := _GGAP_CALL_METH(tool_item, "get_proxy_menu_item", arg1);
  return retval;
end);
InstallMethod(GetReliefStyle, [IsGtkToolItem],
function(tool_item)
  local retval;
  retval := _GGAP_CALL_METH(tool_item, "get_relief_style");
  return retval;
end);
InstallMethod(GetToolbarStyle, [IsGtkToolItem],
function(tool_item)
  local retval;
  retval := _GGAP_CALL_METH(tool_item, "get_toolbar_style");
  return retval;
end);
InstallMethod(GetUseDragWindow, [IsGtkToolItem],
function(tool_item)
  local retval;
  retval := _GGAP_CALL_METH(tool_item, "get_use_drag_window");
  return retval;
end);
InstallMethod(GetVisibleHorizontal, [IsGtkToolItem],
function(tool_item)
  local retval;
  retval := _GGAP_CALL_METH(tool_item, "get_visible_horizontal");
  return retval;
end);
InstallMethod(GetVisibleVertical, [IsGtkToolItem],
function(tool_item)
  local retval;
  retval := _GGAP_CALL_METH(tool_item, "get_visible_vertical");
  return retval;
end);
InstallMethod(RebuildMenu, [IsGtkToolItem],
function(tool_item)
  local retval;
  retval := _GGAP_CALL_METH(tool_item, "rebuild_menu");
  return retval;
end);
InstallMethod(RetrieveProxyMenuItem, [IsGtkToolItem],
function(tool_item)
  local retval;
  retval := _GGAP_CALL_METH(tool_item, "retrieve_proxy_menu_item");
  return retval;
end);
InstallMethod(SetExpand, [IsGtkToolItem, IsBool],
function(tool_item, setting)
  local retval;
  retval := _GGAP_CALL_METH(tool_item, "set_expand", setting);
  return retval;
end);
InstallMethod(SetHomogeneous, [IsGtkToolItem, IsBool],
function(tool_item, setting)
  local retval;
  retval := _GGAP_CALL_METH(tool_item, "set_homogeneous", setting);
  return retval;
end);
InstallMethod(SetIsImportant, [IsGtkToolItem, IsBool],
function(tool_item, setting)
  local retval;
  retval := _GGAP_CALL_METH(tool_item, "set_is_important", setting);
  return retval;
end);
InstallMethod(SetProxyMenuItem, [IsGtkToolItem, IsString, IsGtkWidget],
function(tool_item, arg1, widget)
  local retval;
  retval := _GGAP_CALL_METH(tool_item, "set_proxy_menu_item", arg1, widget);
  return retval;
end);
InstallMethod(SetTooltip, [IsGtkToolItem, IsGtkTooltips, IsString, IsString],
function(tool_item, tooltips, text, arg3)
  local retval;
  retval := _GGAP_CALL_METH(tool_item, "set_tooltip", tooltips, text, arg3);
  return retval;
end);
InstallMethod(SetUseDragWindow, [IsGtkToolItem, IsBool],
function(tool_item, setting)
  local retval;
  retval := _GGAP_CALL_METH(tool_item, "set_use_drag_window", setting);
  return retval;
end);
InstallMethod(SetVisibleHorizontal, [IsGtkToolItem, IsBool],
function(tool_item, setting)
  local retval;
  retval := _GGAP_CALL_METH(tool_item, "set_visible_horizontal", setting);
  return retval;
end);
InstallMethod(SetVisibleVertical, [IsGtkToolItem, IsBool],
function(tool_item, setting)
  local retval;
  retval := _GGAP_CALL_METH(tool_item, "set_visible_vertical", setting);
  return retval;
end);
InstallMethod(GtkSeparatorToolItem, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.SeparatorToolItem");
  return retval;
end);
InstallMethod(GetDraw, [IsGtkSeparatorToolItem],
function(tool_item)
  local retval;
  retval := _GGAP_CALL_METH(tool_item, "get_draw");
  return retval;
end);
InstallMethod(SetDraw, [IsGtkSeparatorToolItem, IsBool],
function(tool_item, setting)
  local retval;
  retval := _GGAP_CALL_METH(tool_item, "set_draw", setting);
  return retval;
end);
InstallMethod(GtkToolButton, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.ToolButton");
  return retval;
end);
InstallMethod(GtkToolButton, [IsGtkWidget],
function(widget)
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.ToolButton", widget);
  return retval;
end);
InstallMethod(GtkToolButton, [IsGtkWidget, IsString],
function(widget, arg2)
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.ToolButton", widget, arg2);
  return retval;
end);
InstallMethod(GetIconName, [IsGtkToolButton],
function(button)
  local retval;
  retval := _GGAP_CALL_METH(button, "get_icon_name");
  return retval;
end);
InstallMethod(GetIconWidget, [IsGtkToolButton],
function(button)
  local retval;
  retval := _GGAP_CALL_METH(button, "get_icon_widget");
  return retval;
end);
InstallMethod(GetLabel, [IsGtkToolButton],
function(button)
  local retval;
  retval := _GGAP_CALL_METH(button, "get_label");
  return retval;
end);
InstallMethod(GetLabelWidget, [IsGtkToolButton],
function(button)
  local retval;
  retval := _GGAP_CALL_METH(button, "get_label_widget");
  return retval;
end);
InstallMethod(GetStockId, [IsGtkToolButton],
function(button)
  local retval;
  retval := _GGAP_CALL_METH(button, "get_stock_id");
  return retval;
end);
InstallMethod(GetUseUnderline, [IsGtkToolButton],
function(button)
  local retval;
  retval := _GGAP_CALL_METH(button, "get_use_underline");
  return retval;
end);
InstallMethod(SetIconName, [IsGtkToolButton, IsString],
function(button, icon_name)
  local retval;
  retval := _GGAP_CALL_METH(button, "set_icon_name", icon_name);
  return retval;
end);
InstallMethod(SetIconWidget, [IsGtkToolButton, IsGtkWidget],
function(button, widget)
  local retval;
  retval := _GGAP_CALL_METH(button, "set_icon_widget", widget);
  return retval;
end);
InstallMethod(SetLabel, [IsGtkToolButton, IsString],
function(button, label)
  local retval;
  retval := _GGAP_CALL_METH(button, "set_label", label);
  return retval;
end);
InstallMethod(SetLabelWidget, [IsGtkToolButton, IsGtkWidget],
function(button, widget)
  local retval;
  retval := _GGAP_CALL_METH(button, "set_label_widget", widget);
  return retval;
end);
InstallMethod(SetStockId, [IsGtkToolButton, IsString],
function(button, stock_id)
  local retval;
  retval := _GGAP_CALL_METH(button, "set_stock_id", stock_id);
  return retval;
end);
InstallMethod(SetUseUnderline, [IsGtkToolButton, IsBool],
function(button, setting)
  local retval;
  retval := _GGAP_CALL_METH(button, "set_use_underline", setting);
  return retval;
end);
InstallMethod(GtkMenuToolButton, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.MenuToolButton");
  return retval;
end);
InstallMethod(GetMenu, [IsGtkMenuToolButton],
function(button)
  local retval;
  retval := _GGAP_CALL_METH(button, "get_menu");
  return retval;
end);
InstallMethod(SetArrowTooltip, [IsGtkMenuToolButton, IsGtkTooltips, IsString, IsString],
function(button, tooltips, text, arg3)
  local retval;
  retval := _GGAP_CALL_METH(button, "set_arrow_tooltip", tooltips, text, arg3);
  return retval;
end);
InstallMethod(SetMenu, [IsGtkMenuToolButton, IsGtkWidget],
function(button, widget)
  local retval;
  retval := _GGAP_CALL_METH(button, "set_menu", widget);
  return retval;
end);
InstallMethod(GtkToggleToolButton, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.ToggleToolButton");
  return retval;
end);
InstallMethod(GtkToggleToolButton, [IsString],
function(label)
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.ToggleToolButton", label);
  return retval;
end);
InstallMethod(GetActive, [IsGtkToggleToolButton],
function(button)
  local retval;
  retval := _GGAP_CALL_METH(button, "get_active");
  return retval;
end);
InstallMethod(SetActive, [IsGtkToggleToolButton, IsBool],
function(button, active)
  local retval;
  retval := _GGAP_CALL_METH(button, "set_active", active);
  return retval;
end);
InstallMethod(GtkRadioToolButton, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.RadioToolButton");
  return retval;
end);
InstallMethod(GtkViewport, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.Viewport");
  return retval;
end);
InstallMethod(GetHadjustment, [IsGtkViewport],
function(viewport)
  local retval;
  retval := _GGAP_CALL_METH(viewport, "get_hadjustment");
  return retval;
end);
InstallMethod(GetShadowType, [IsGtkViewport],
function(viewport)
  local retval;
  retval := _GGAP_CALL_METH(viewport, "get_shadow_type");
  return retval;
end);
InstallMethod(GetVadjustment, [IsGtkViewport],
function(viewport)
  local retval;
  retval := _GGAP_CALL_METH(viewport, "get_vadjustment");
  return retval;
end);
InstallMethod(SetHadjustment, [IsGtkViewport, IsGtkAdjustment],
function(viewport, adjustment)
  local retval;
  retval := _GGAP_CALL_METH(viewport, "set_hadjustment", adjustment);
  return retval;
end);
InstallMethod(SetShadowType, [IsGtkViewport, IsInt],
function(viewport, arg1)
  local retval;
  retval := _GGAP_CALL_METH(viewport, "set_shadow_type", arg1);
  return retval;
end);
InstallMethod(SetVadjustment, [IsGtkViewport, IsGtkAdjustment],
function(viewport, adjustment)
  local retval;
  retval := _GGAP_CALL_METH(viewport, "set_vadjustment", adjustment);
  return retval;
end);
InstallMethod(GtkWindow, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.Window");
  return retval;
end);
InstallMethod(GtkWindow, [IsInt],
function(arg1)
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.Window", arg1);
  return retval;
end);
InstallMethod(ActivateDefault, [IsGtkWindow],
function(window)
  local retval;
  retval := _GGAP_CALL_METH(window, "activate_default");
  return retval;
end);
InstallMethod(ActivateFocus, [IsGtkWindow],
function(window)
  local retval;
  retval := _GGAP_CALL_METH(window, "activate_focus");
  return retval;
end);
InstallMethod(Deiconify, [IsGtkWindow],
function(window)
  local retval;
  retval := _GGAP_CALL_METH(window, "deiconify");
  return retval;
end);
InstallMethod(Fullscreen, [IsGtkWindow],
function(window)
  local retval;
  retval := _GGAP_CALL_METH(window, "fullscreen");
  return retval;
end);
InstallMethod(GetAcceptFocus, [IsGtkWindow],
function(window)
  local retval;
  retval := _GGAP_CALL_METH(window, "get_accept_focus");
  return retval;
end);
InstallMethod(GetDecorated, [IsGtkWindow],
function(window)
  local retval;
  retval := _GGAP_CALL_METH(window, "get_decorated");
  return retval;
end);
InstallMethod(GetDefaultSize, [IsGtkWindow],
function(window)
  local retval;
  retval := _GGAP_CALL_METH(window, "get_default_size");
  return retval;
end);
InstallMethod(GetDestroyWithParent, [IsGtkWindow],
function(window)
  local retval;
  retval := _GGAP_CALL_METH(window, "get_destroy_with_parent");
  return retval;
end);
InstallMethod(GetFocus, [IsGtkWindow],
function(window)
  local retval;
  retval := _GGAP_CALL_METH(window, "get_focus");
  return retval;
end);
InstallMethod(GetFocusOnMap, [IsGtkWindow],
function(window)
  local retval;
  retval := _GGAP_CALL_METH(window, "get_focus_on_map");
  return retval;
end);
InstallMethod(GetHasFrame, [IsGtkWindow],
function(window)
  local retval;
  retval := _GGAP_CALL_METH(window, "get_has_frame");
  return retval;
end);
InstallMethod(GetIcon, [IsGtkWindow],
function(window)
  local retval;
  retval := _GGAP_CALL_METH(window, "get_icon");
  return retval;
end);
InstallMethod(GetIconList, [IsGtkWindow],
function(window)
  local retval;
  retval := _GGAP_CALL_METH(window, "get_icon_list");
  return retval;
end);
InstallMethod(GetIconName, [IsGtkWindow],
function(window)
  local retval;
  retval := _GGAP_CALL_METH(window, "get_icon_name");
  return retval;
end);
InstallMethod(GetMnemonicModifier, [IsGtkWindow],
function(window)
  local retval;
  retval := _GGAP_CALL_METH(window, "get_mnemonic_modifier");
  return retval;
end);
InstallMethod(GetModal, [IsGtkWindow],
function(window)
  local retval;
  retval := _GGAP_CALL_METH(window, "get_modal");
  return retval;
end);
InstallMethod(GetPosition, [IsGtkWindow],
function(window)
  local retval;
  retval := _GGAP_CALL_METH(window, "get_position");
  return retval;
end);
InstallMethod(GetResizable, [IsGtkWindow],
function(window)
  local retval;
  retval := _GGAP_CALL_METH(window, "get_resizable");
  return retval;
end);
InstallMethod(GetRole, [IsGtkWindow],
function(window)
  local retval;
  retval := _GGAP_CALL_METH(window, "get_role");
  return retval;
end);
InstallMethod(GetSize, [IsGtkWindow],
function(window)
  local retval;
  retval := _GGAP_CALL_METH(window, "get_size");
  return retval;
end);
InstallMethod(GetSkipPagerHint, [IsGtkWindow],
function(window)
  local retval;
  retval := _GGAP_CALL_METH(window, "get_skip_pager_hint");
  return retval;
end);
InstallMethod(GetSkipTaskbarHint, [IsGtkWindow],
function(window)
  local retval;
  retval := _GGAP_CALL_METH(window, "get_skip_taskbar_hint");
  return retval;
end);
InstallMethod(GetTitle, [IsGtkWindow],
function(window)
  local retval;
  retval := _GGAP_CALL_METH(window, "get_title");
  return retval;
end);
InstallMethod(GetTransientFor, [IsGtkWindow],
function(window)
  local retval;
  retval := _GGAP_CALL_METH(window, "get_transient_for");
  return retval;
end);
InstallMethod(GetTypeHint, [IsGtkWindow],
function(window)
  local retval;
  retval := _GGAP_CALL_METH(window, "get_type_hint");
  return retval;
end);
InstallMethod(GetUrgencyHint, [IsGtkWindow],
function(window)
  local retval;
  retval := _GGAP_CALL_METH(window, "get_urgency_hint");
  return retval;
end);
InstallMethod(HasToplevelFocus, [IsGtkWindow],
function(window)
  local retval;
  retval := _GGAP_CALL_METH(window, "has_toplevel_focus");
  return retval;
end);
InstallMethod(Iconify, [IsGtkWindow],
function(window)
  local retval;
  retval := _GGAP_CALL_METH(window, "iconify");
  return retval;
end);
InstallMethod(IsActive, [IsGtkWindow],
function(window)
  local retval;
  retval := _GGAP_CALL_METH(window, "is_active");
  return retval;
end);
InstallMethod(Maximize, [IsGtkWindow],
function(window)
  local retval;
  retval := _GGAP_CALL_METH(window, "maximize");
  return retval;
end);
InstallMethod(Move, [IsGtkWindow, IsInt, IsInt],
function(window, arg1, arg2)
  local retval;
  retval := _GGAP_CALL_METH(window, "move", arg1, arg2);
  return retval;
end);
InstallMethod(ParseGeometry, [IsGtkWindow, IsString],
function(window, geometry)
  local retval;
  retval := _GGAP_CALL_METH(window, "parse_geometry", geometry);
  return retval;
end);
InstallMethod(Present, [IsGtkWindow],
function(window)
  local retval;
  retval := _GGAP_CALL_METH(window, "present");
  return retval;
end);
InstallMethod(PresentWithTime, [IsGtkWindow, IsInt],
function(window, arg1)
  local retval;
  retval := _GGAP_CALL_METH(window, "present_with_time", arg1);
  return retval;
end);
InstallMethod(ReshowWithInitialSize, [IsGtkWindow],
function(window)
  local retval;
  retval := _GGAP_CALL_METH(window, "reshow_with_initial_size");
  return retval;
end);
InstallMethod(Resize, [IsGtkWindow, IsInt, IsInt],
function(window, arg1, arg2)
  local retval;
  retval := _GGAP_CALL_METH(window, "resize", arg1, arg2);
  return retval;
end);
InstallMethod(SetAcceptFocus, [IsGtkWindow, IsBool],
function(window, setting)
  local retval;
  retval := _GGAP_CALL_METH(window, "set_accept_focus", setting);
  return retval;
end);
InstallMethod(SetDecorated, [IsGtkWindow, IsBool],
function(window, setting)
  local retval;
  retval := _GGAP_CALL_METH(window, "set_decorated", setting);
  return retval;
end);
InstallMethod(SetDefault, [IsGtkWindow, IsGtkWidget],
function(window, widget)
  local retval;
  retval := _GGAP_CALL_METH(window, "set_default", widget);
  return retval;
end);
InstallMethod(SetDefaultSize, [IsGtkWindow, IsInt, IsInt],
function(window, arg1, arg2)
  local retval;
  retval := _GGAP_CALL_METH(window, "set_default_size", arg1, arg2);
  return retval;
end);
InstallMethod(SetDestroyWithParent, [IsGtkWindow, IsBool],
function(window, setting)
  local retval;
  retval := _GGAP_CALL_METH(window, "set_destroy_with_parent", setting);
  return retval;
end);
InstallMethod(SetFocus, [IsGtkWindow, IsGtkWidget],
function(window, widget)
  local retval;
  retval := _GGAP_CALL_METH(window, "set_focus", widget);
  return retval;
end);
InstallMethod(SetFocusOnMap, [IsGtkWindow, IsBool],
function(window, setting)
  local retval;
  retval := _GGAP_CALL_METH(window, "set_focus_on_map", setting);
  return retval;
end);
InstallMethod(SetHasFrame, [IsGtkWindow, IsBool],
function(window, setting)
  local retval;
  retval := _GGAP_CALL_METH(window, "set_has_frame", setting);
  return retval;
end);
InstallMethod(SetIconFromFile, [IsGtkWindow, IsString],
function(window, filename)
  local retval;
  retval := _GGAP_CALL_METH(window, "set_icon_from_file", filename);
  return retval;
end);
InstallMethod(SetIconName, [IsGtkWindow, IsString],
function(window, icon_name)
  local retval;
  retval := _GGAP_CALL_METH(window, "set_icon_name", icon_name);
  return retval;
end);
InstallMethod(SetKeepAbove, [IsGtkWindow, IsBool],
function(window, setting)
  local retval;
  retval := _GGAP_CALL_METH(window, "set_keep_above", setting);
  return retval;
end);
InstallMethod(SetKeepBelow, [IsGtkWindow, IsBool],
function(window, setting)
  local retval;
  retval := _GGAP_CALL_METH(window, "set_keep_below", setting);
  return retval;
end);
InstallMethod(SetModal, [IsGtkWindow, IsBool],
function(window, modal)
  local retval;
  retval := _GGAP_CALL_METH(window, "set_modal", modal);
  return retval;
end);
InstallMethod(SetPosition, [IsGtkWindow, IsInt],
function(window, arg1)
  local retval;
  retval := _GGAP_CALL_METH(window, "set_position", arg1);
  return retval;
end);
InstallMethod(SetResizable, [IsGtkWindow, IsBool],
function(window, resizable)
  local retval;
  retval := _GGAP_CALL_METH(window, "set_resizable", resizable);
  return retval;
end);
InstallMethod(SetRole, [IsGtkWindow, IsString],
function(window, role)
  local retval;
  retval := _GGAP_CALL_METH(window, "set_role", role);
  return retval;
end);
InstallMethod(SetScreen, [IsGtkWindow, IsGdkScreen],
function(window, screen)
  local retval;
  retval := _GGAP_CALL_METH(window, "set_screen", screen);
  return retval;
end);
InstallMethod(SetSkipPagerHint, [IsGtkWindow, IsBool],
function(window, setting)
  local retval;
  retval := _GGAP_CALL_METH(window, "set_skip_pager_hint", setting);
  return retval;
end);
InstallMethod(SetSkipTaskbarHint, [IsGtkWindow, IsBool],
function(window, setting)
  local retval;
  retval := _GGAP_CALL_METH(window, "set_skip_taskbar_hint", setting);
  return retval;
end);
InstallMethod(SetTitle, [IsGtkWindow, IsString],
function(window, title)
  local retval;
  retval := _GGAP_CALL_METH(window, "set_title", title);
  return retval;
end);
InstallMethod(SetTransientFor, [IsGtkWindow, IsGtkWindow],
function(window, parent)
  local retval;
  retval := _GGAP_CALL_METH(window, "set_transient_for", parent);
  return retval;
end);
InstallMethod(SetTypeHint, [IsGtkWindow, IsInt],
function(window, arg1)
  local retval;
  retval := _GGAP_CALL_METH(window, "set_type_hint", arg1);
  return retval;
end);
InstallMethod(SetUrgencyHint, [IsGtkWindow, IsBool],
function(window, setting)
  local retval;
  retval := _GGAP_CALL_METH(window, "set_urgency_hint", setting);
  return retval;
end);
InstallMethod(Stick, [IsGtkWindow],
function(window)
  local retval;
  retval := _GGAP_CALL_METH(window, "stick");
  return retval;
end);
InstallMethod(Unfullscreen, [IsGtkWindow],
function(window)
  local retval;
  retval := _GGAP_CALL_METH(window, "unfullscreen");
  return retval;
end);
InstallMethod(Unmaximize, [IsGtkWindow],
function(window)
  local retval;
  retval := _GGAP_CALL_METH(window, "unmaximize");
  return retval;
end);
InstallMethod(Unstick, [IsGtkWindow],
function(window)
  local retval;
  retval := _GGAP_CALL_METH(window, "unstick");
  return retval;
end);
InstallMethod(GtkDialog, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.Dialog");
  return retval;
end);
InstallMethod(GtkDialog, [IsString],
function(arg1)
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.Dialog", arg1);
  return retval;
end);
InstallMethod(GtkDialog, [IsString, IsGtkWindow],
function(arg1, window)
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.Dialog", arg1, window);
  return retval;
end);
InstallMethod(GtkDialog, [IsString, IsGtkWindow, IsInt],
function(arg1, window, arg3)
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.Dialog", arg1, window, arg3);
  return retval;
end);
InstallMethod(GtkDialog, [IsString, IsGtkWindow, IsInt, IsList],
function(arg1, window, arg3, arg4)
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.Dialog", arg1, window, arg3, arg4);
  return retval;
end);
InstallMethod(AddActionWidget, [IsGtkDialog, IsGtkWidget, IsInt],
function(dialog, widget, response)
  local retval;
  retval := _GGAP_CALL_METH(dialog, "add_action_widget", widget, response);
  return retval;
end);
InstallMethod(AddButton, [IsGtkDialog, IsString, IsInt],
function(dialog, arg1, response)
  local retval;
  retval := _GGAP_CALL_METH(dialog, "add_button", arg1, response);
  return retval;
end);
InstallMethod(GetHasSeparator, [IsGtkDialog],
function(dialog)
  local retval;
  retval := _GGAP_CALL_METH(dialog, "get_has_separator");
  return retval;
end);
InstallMethod(GetResponseForWidget, [IsGtkDialog, IsGtkWidget],
function(dialog, widget)
  local retval;
  retval := _GGAP_CALL_METH(dialog, "get_response_for_widget", widget);
  return retval;
end);
InstallMethod(Response, [IsGtkDialog, IsInt],
function(dialog, response)
  local retval;
  retval := _GGAP_CALL_METH(dialog, "response", response);
  return retval;
end);
InstallMethod(Run, [IsGtkDialog],
function(dialog)
  local retval;
  retval := _GGAP_CALL_METH(dialog, "run");
  return retval;
end);
InstallMethod(SetDefaultResponse, [IsGtkDialog, IsInt],
function(dialog, response)
  local retval;
  retval := _GGAP_CALL_METH(dialog, "set_default_response", response);
  return retval;
end);
InstallMethod(SetHasSeparator, [IsGtkDialog, IsBool],
function(dialog, setting)
  local retval;
  retval := _GGAP_CALL_METH(dialog, "set_has_separator", setting);
  return retval;
end);
InstallMethod(SetResponseSensitive, [IsGtkDialog, IsInt, IsBool],
function(dialog, response, sensitive)
  local retval;
  retval := _GGAP_CALL_METH(dialog, "set_response_sensitive", response, sensitive);
  return retval;
end);
InstallMethod(GtkAboutDialog, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.AboutDialog");
  return retval;
end);
InstallMethod(GetArtists, [IsGtkAboutDialog],
function(about_dialog)
  local retval;
  retval := _GGAP_CALL_METH(about_dialog, "get_artists");
  return retval;
end);
InstallMethod(GetAuthors, [IsGtkAboutDialog],
function(about_dialog)
  local retval;
  retval := _GGAP_CALL_METH(about_dialog, "get_authors");
  return retval;
end);
InstallMethod(GetComments, [IsGtkAboutDialog],
function(about_dialog)
  local retval;
  retval := _GGAP_CALL_METH(about_dialog, "get_comments");
  return retval;
end);
InstallMethod(GetCopyright, [IsGtkAboutDialog],
function(about_dialog)
  local retval;
  retval := _GGAP_CALL_METH(about_dialog, "get_copyright");
  return retval;
end);
InstallMethod(GetDocumenters, [IsGtkAboutDialog],
function(about_dialog)
  local retval;
  retval := _GGAP_CALL_METH(about_dialog, "get_documenters");
  return retval;
end);
InstallMethod(GetLicense, [IsGtkAboutDialog],
function(about_dialog)
  local retval;
  retval := _GGAP_CALL_METH(about_dialog, "get_license");
  return retval;
end);
InstallMethod(GetLogo, [IsGtkAboutDialog],
function(about_dialog)
  local retval;
  retval := _GGAP_CALL_METH(about_dialog, "get_logo");
  return retval;
end);
InstallMethod(GetLogoIconName, [IsGtkAboutDialog],
function(about_dialog)
  local retval;
  retval := _GGAP_CALL_METH(about_dialog, "get_logo_icon_name");
  return retval;
end);
InstallMethod(GetApplicationName, [IsGtkAboutDialog],
function(about_dialog)
  local retval;
  retval := _GGAP_CALL_METH(about_dialog, "get_name");
  return retval;
end);
InstallMethod(GetTranslatorCredits, [IsGtkAboutDialog],
function(about_dialog)
  local retval;
  retval := _GGAP_CALL_METH(about_dialog, "get_translator_credits");
  return retval;
end);
InstallMethod(GetVersion, [IsGtkAboutDialog],
function(about_dialog)
  local retval;
  retval := _GGAP_CALL_METH(about_dialog, "get_version");
  return retval;
end);
InstallMethod(GetWebsite, [IsGtkAboutDialog],
function(about_dialog)
  local retval;
  retval := _GGAP_CALL_METH(about_dialog, "get_website");
  return retval;
end);
InstallMethod(GetWebsiteLabel, [IsGtkAboutDialog],
function(about_dialog)
  local retval;
  retval := _GGAP_CALL_METH(about_dialog, "get_website_label");
  return retval;
end);
InstallMethod(GetWrapLicense, [IsGtkAboutDialog],
function(about_dialog)
  local retval;
  retval := _GGAP_CALL_METH(about_dialog, "get_wrap_license");
  return retval;
end);
InstallMethod(SetArtists, [IsGtkAboutDialog, IsList],
function(about_dialog, arg1)
  local retval;
  retval := _GGAP_CALL_METH(about_dialog, "set_artists", arg1);
  return retval;
end);
InstallMethod(SetAuthors, [IsGtkAboutDialog, IsList],
function(about_dialog, arg1)
  local retval;
  retval := _GGAP_CALL_METH(about_dialog, "set_authors", arg1);
  return retval;
end);
InstallMethod(SetComments, [IsGtkAboutDialog, IsString],
function(about_dialog, comments)
  local retval;
  retval := _GGAP_CALL_METH(about_dialog, "set_comments", comments);
  return retval;
end);
InstallMethod(SetCopyright, [IsGtkAboutDialog, IsString],
function(about_dialog, copyright)
  local retval;
  retval := _GGAP_CALL_METH(about_dialog, "set_copyright", copyright);
  return retval;
end);
InstallMethod(SetDocumenters, [IsGtkAboutDialog, IsList],
function(about_dialog, arg1)
  local retval;
  retval := _GGAP_CALL_METH(about_dialog, "set_documenters", arg1);
  return retval;
end);
InstallMethod(SetLicense, [IsGtkAboutDialog, IsString],
function(about_dialog, license)
  local retval;
  retval := _GGAP_CALL_METH(about_dialog, "set_license", license);
  return retval;
end);
InstallMethod(SetLogo, [IsGtkAboutDialog, IsGdkPixbuf],
function(about_dialog, pixbuf)
  local retval;
  retval := _GGAP_CALL_METH(about_dialog, "set_logo", pixbuf);
  return retval;
end);
InstallMethod(SetLogoIconName, [IsGtkAboutDialog, IsString],
function(about_dialog, icon_name)
  local retval;
  retval := _GGAP_CALL_METH(about_dialog, "set_logo_icon_name", icon_name);
  return retval;
end);
InstallMethod(SetApplicationName, [IsGtkAboutDialog, IsString],
function(about_dialog, name)
  local retval;
  retval := _GGAP_CALL_METH(about_dialog, "set_name", name);
  return retval;
end);
InstallMethod(SetTranslatorCredits, [IsGtkAboutDialog, IsString],
function(about_dialog, credits)
  local retval;
  retval := _GGAP_CALL_METH(about_dialog, "set_translator_credits", credits);
  return retval;
end);
InstallMethod(SetVersion, [IsGtkAboutDialog, IsString],
function(about_dialog, version)
  local retval;
  retval := _GGAP_CALL_METH(about_dialog, "set_version", version);
  return retval;
end);
InstallMethod(SetWebsite, [IsGtkAboutDialog, IsString],
function(about_dialog, website)
  local retval;
  retval := _GGAP_CALL_METH(about_dialog, "set_website", website);
  return retval;
end);
InstallMethod(SetWebsiteLabel, [IsGtkAboutDialog, IsString],
function(about_dialog, website_label)
  local retval;
  retval := _GGAP_CALL_METH(about_dialog, "set_website_label", website_label);
  return retval;
end);
InstallMethod(SetWrapLicense, [IsGtkAboutDialog, IsInt],
function(about_dialog, setting)
  local retval;
  retval := _GGAP_CALL_METH(about_dialog, "set_wrap_license", setting);
  return retval;
end);
InstallMethod(GtkColorSelectionDialog, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.ColorSelectionDialog");
  return retval;
end);
InstallMethod(GtkFileChooserDialog, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.FileChooserDialog");
  return retval;
end);
InstallMethod(GtkFontSelectionDialog, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.FontSelectionDialog");
  return retval;
end);
InstallMethod(GtkMessageDialog, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.MessageDialog");
  return retval;
end);
InstallMethod(SetMarkup, [IsGtkMessageDialog, IsString],
function(message_dialog, arg1)
  local retval;
  retval := _GGAP_CALL_METH(message_dialog, "set_markup", arg1);
  return retval;
end);
InstallMethod(GetHomogeneous, [IsGtkBox],
function(box)
  local retval;
  retval := _GGAP_CALL_METH(box, "get_homogeneous");
  return retval;
end);
InstallMethod(GetSpacing, [IsGtkBox],
function(box)
  local retval;
  retval := _GGAP_CALL_METH(box, "get_spacing");
  return retval;
end);
InstallMethod(PackEnd, [IsGtkBox, IsGtkWidget, IsBool, IsBool, IsInt],
function(box, widget, arg2, arg3, arg4)
  local retval;
  retval := _GGAP_CALL_METH(box, "pack_end", widget, arg2, arg3, arg4);
  return retval;
end);
InstallMethod(PackEndDefaults, [IsGtkBox, IsGtkWidget],
function(box, widget)
  local retval;
  retval := _GGAP_CALL_METH(box, "pack_end_defaults", widget);
  return retval;
end);
InstallMethod(PackStart, [IsGtkBox, IsGtkWidget, IsBool, IsBool, IsInt],
function(box, widget, arg2, arg3, arg4)
  local retval;
  retval := _GGAP_CALL_METH(box, "pack_start", widget, arg2, arg3, arg4);
  return retval;
end);
InstallMethod(PackStartDefaults, [IsGtkBox, IsGtkWidget],
function(box, widget)
  local retval;
  retval := _GGAP_CALL_METH(box, "pack_start_defaults", widget);
  return retval;
end);
InstallMethod(QueryChildPacking, [IsGtkBox, IsGtkWidget],
function(box, child)
  local retval;
  retval := _GGAP_CALL_METH(box, "query_child_packing", child);
  return retval;
end);
InstallMethod(ReorderChild, [IsGtkBox, IsGtkWidget, IsInt],
function(box, widget, arg2)
  local retval;
  retval := _GGAP_CALL_METH(box, "reorder_child", widget, arg2);
  return retval;
end);
InstallMethod(SetChildPacking, [IsGtkBox, IsGtkWidget, IsBool, IsBool, IsInt, IsInt],
function(box, child, expand, fill, padding, arg5)
  local retval;
  retval := _GGAP_CALL_METH(box, "set_child_packing", child, expand, fill, padding, arg5);
  return retval;
end);
InstallMethod(SetHomogeneous, [IsGtkBox, IsBool],
function(box, setting)
  local retval;
  retval := _GGAP_CALL_METH(box, "set_homogeneous", setting);
  return retval;
end);
InstallMethod(SetSpacing, [IsGtkBox, IsInt],
function(box, arg1)
  local retval;
  retval := _GGAP_CALL_METH(box, "set_spacing", arg1);
  return retval;
end);
InstallMethod(GtkButtonBox, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.ButtonBox");
  return retval;
end);
InstallMethod(GetChildIpadding, [IsGtkButtonBox],
function(button_box)
  local retval;
  retval := _GGAP_CALL_METH(button_box, "get_child_ipadding");
  return retval;
end);
InstallMethod(GetChildSecondary, [IsGtkButtonBox, IsGtkWidget],
function(button_box, widget)
  local retval;
  retval := _GGAP_CALL_METH(button_box, "get_child_secondary", widget);
  return retval;
end);
InstallMethod(GetChildSize, [IsGtkButtonBox],
function(button_box)
  local retval;
  retval := _GGAP_CALL_METH(button_box, "get_child_size");
  return retval;
end);
InstallMethod(GetLayout, [IsGtkButtonBox],
function(button_box)
  local retval;
  retval := _GGAP_CALL_METH(button_box, "get_layout");
  return retval;
end);
InstallMethod(SetChildSecondary, [IsGtkButtonBox, IsGtkWidget, IsBool],
function(button_box, widget, arg2)
  local retval;
  retval := _GGAP_CALL_METH(button_box, "set_child_secondary", widget, arg2);
  return retval;
end);
InstallMethod(SetLayout, [IsGtkButtonBox, IsInt],
function(button_box, arg1)
  local retval;
  retval := _GGAP_CALL_METH(button_box, "set_layout", arg1);
  return retval;
end);
InstallMethod(GtkHButtonBox, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.HButtonBox");
  return retval;
end);
InstallMethod(GtkVButtonBox, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.VButtonBox");
  return retval;
end);
InstallMethod(GtkHBox, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.HBox");
  return retval;
end);
InstallMethod(GtkFileChooserButton, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.FileChooserButton");
  return retval;
end);
InstallMethod(GtkStatusbar, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.Statusbar");
  return retval;
end);
InstallMethod(GtkVBox, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.VBox");
  return retval;
end);
InstallMethod(GtkColorSelection, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.ColorSelection");
  return retval;
end);
InstallMethod(GtkFileChooserWidget, [IsInt],
function(arg1)
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.FileChooserWidget", arg1);
  return retval;
end);
InstallMethod(GtkFontSelection, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.FontSelection");
  return retval;
end);
InstallMethod(GetFontName, [IsGtkFontSelection],
function(font_selection)
  local retval;
  retval := _GGAP_CALL_METH(font_selection, "get_font_name");
  return retval;
end);
InstallMethod(GetPreviewText, [IsGtkFontSelection],
function(font_selection)
  local retval;
  retval := _GGAP_CALL_METH(font_selection, "get_preview_text");
  return retval;
end);
InstallMethod(SetFontName, [IsGtkFontSelection, IsString],
function(font_selection, font)
  local retval;
  retval := _GGAP_CALL_METH(font_selection, "set_font_name", font);
  return retval;
end);
InstallMethod(SetPreviewText, [IsGtkFontSelection, IsString],
function(font_selection, text)
  local retval;
  retval := _GGAP_CALL_METH(font_selection, "set_preview_text", text);
  return retval;
end);
InstallMethod(GtkFixed, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.Fixed");
  return retval;
end);
InstallMethod(GtkIconView, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.IconView");
  return retval;
end);
InstallMethod(GtkLayout, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.Layout");
  return retval;
end);
InstallMethod(GtkMenuShell, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.MenuShell");
  return retval;
end);
InstallMethod(GtkMenu, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.Menu");
  return retval;
end);
InstallMethod(GtkMenuBar, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.MenuBar");
  return retval;
end);
InstallMethod(GtkNotebook, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.Notebook");
  return retval;
end);
InstallMethod(GtkPaned, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.Paned");
  return retval;
end);
InstallMethod(GtkHPaned, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.HPaned");
  return retval;
end);
InstallMethod(GtkVPaned, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.VPaned");
  return retval;
end);
InstallMethod(GtkSocket, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.Socket");
  return retval;
end);
InstallMethod(GtkTable, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.Table");
  return retval;
end);
InstallMethod(GtkTextView, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.TextView");
  return retval;
end);
InstallMethod(GtkTextView, [IsGtkTextBuffer],
function(text_buffer)
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.TextView", text_buffer);
  return retval;
end);
InstallMethod(GetBuffer, [IsGtkTextView],
function(text_view)
  local retval;
  retval := _GGAP_CALL_METH(text_view, "get_buffer");
  return retval;
end);
InstallMethod(GetText, [IsGtkTextView],
function(text_view)
  local retval;
  retval := _GGAP_CALL_FUNC("gap.text_view_get_text", text_view);
  return retval;
end);
InstallMethod(SetBuffer, [IsGtkTextView, IsGtkTextBuffer],
function(text_view, text_buffer)
  local retval;
  retval := _GGAP_CALL_METH(text_view, "set_buffer", text_buffer);
  return retval;
end);
InstallMethod(SetMarkup, [IsGtkTextView, IsString],
function(text_view, markup)
  local retval;
  retval := _GGAP_CALL_FUNC("moo.app.text_view_set_markup", text_view, markup);
  return retval;
end);
InstallMethod(SetText, [IsGtkTextView, IsString],
function(text_view, text)
  local retval;
  retval := _GGAP_CALL_FUNC("gap.text_view_set_text", text_view, text);
  return retval;
end);
InstallMethod(MooTextView, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("moo.edit.TextView");
  return retval;
end);
InstallMethod(BeginNotUndoableAction, [IsMooTextView],
function(text_view)
  local retval;
  retval := _GGAP_CALL_METH(text_view, "begin_not_undoable_action");
  return retval;
end);
InstallMethod(CanRedo, [IsMooTextView],
function(text_view)
  local retval;
  retval := _GGAP_CALL_METH(text_view, "can_redo");
  return retval;
end);
InstallMethod(CanUndo, [IsMooTextView],
function(text_view)
  local retval;
  retval := _GGAP_CALL_METH(text_view, "can_undo");
  return retval;
end);
InstallMethod(EndNotUndoableAction, [IsMooTextView],
function(text_view)
  local retval;
  retval := _GGAP_CALL_METH(text_view, "end_not_undoable_action");
  return retval;
end);
InstallMethod(Redo, [IsMooTextView],
function(text_view)
  local retval;
  retval := _GGAP_CALL_METH(text_view, "redo");
  return retval;
end);
InstallMethod(SetLangById, [IsMooTextView, IsString],
function(text_view, arg1)
  local retval;
  retval := _GGAP_CALL_METH(text_view, "set_lang_by_id", arg1);
  return retval;
end);
InstallMethod(Undo, [IsMooTextView],
function(text_view)
  local retval;
  retval := _GGAP_CALL_METH(text_view, "undo");
  return retval;
end);
InstallMethod(GtkToolbar, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.Toolbar");
  return retval;
end);
InstallMethod(GetDropIndex, [IsGtkToolbar, IsInt, IsInt],
function(toolbar, arg1, arg2)
  local retval;
  retval := _GGAP_CALL_METH(toolbar, "get_drop_index", arg1, arg2);
  return retval;
end);
InstallMethod(GetIconSize, [IsGtkToolbar],
function(toolbar)
  local retval;
  retval := _GGAP_CALL_METH(toolbar, "get_icon_size");
  return retval;
end);
InstallMethod(GetItemIndex, [IsGtkToolbar, IsGtkToolItem],
function(toolbar, tool_item)
  local retval;
  retval := _GGAP_CALL_METH(toolbar, "get_item_index", tool_item);
  return retval;
end);
InstallMethod(GetNItems, [IsGtkToolbar],
function(toolbar)
  local retval;
  retval := _GGAP_CALL_METH(toolbar, "get_n_items");
  return retval;
end);
InstallMethod(GetNthItem, [IsGtkToolbar, IsInt],
function(toolbar, arg1)
  local retval;
  retval := _GGAP_CALL_METH(toolbar, "get_nth_item", arg1);
  return retval;
end);
InstallMethod(GetOrientation, [IsGtkToolbar],
function(toolbar)
  local retval;
  retval := _GGAP_CALL_METH(toolbar, "get_orientation");
  return retval;
end);
InstallMethod(GetReliefStyle, [IsGtkToolbar],
function(toolbar)
  local retval;
  retval := _GGAP_CALL_METH(toolbar, "get_relief_style");
  return retval;
end);
InstallMethod(GetShowArrow, [IsGtkToolbar],
function(toolbar)
  local retval;
  retval := _GGAP_CALL_METH(toolbar, "get_show_arrow");
  return retval;
end);
InstallMethod(GetToolbarStyle, [IsGtkToolbar],
function(toolbar)
  local retval;
  retval := _GGAP_CALL_METH(toolbar, "get_style");
  return retval;
end);
InstallMethod(GetTooltips, [IsGtkToolbar],
function(toolbar)
  local retval;
  retval := _GGAP_CALL_METH(toolbar, "get_tooltips");
  return retval;
end);
InstallMethod(Insert, [IsGtkToolbar, IsGtkToolItem, IsInt],
function(toolbar, tool_item, arg2)
  local retval;
  retval := _GGAP_CALL_METH(toolbar, "insert", tool_item, arg2);
  return retval;
end);
InstallMethod(SetDropHighlightItem, [IsGtkToolbar, IsGtkToolItem, IsInt],
function(toolbar, tool_item, arg2)
  local retval;
  retval := _GGAP_CALL_METH(toolbar, "set_drop_highlight_item", tool_item, arg2);
  return retval;
end);
InstallMethod(SetIconSize, [IsGtkToolbar, IsInt],
function(toolbar, arg1)
  local retval;
  retval := _GGAP_CALL_METH(toolbar, "set_icon_size", arg1);
  return retval;
end);
InstallMethod(SetOrientation, [IsGtkToolbar, IsInt],
function(toolbar, arg1)
  local retval;
  retval := _GGAP_CALL_METH(toolbar, "set_orientation", arg1);
  return retval;
end);
InstallMethod(SetShowArrow, [IsGtkToolbar, IsBool],
function(toolbar, setting)
  local retval;
  retval := _GGAP_CALL_METH(toolbar, "set_show_arrow", setting);
  return retval;
end);
InstallMethod(SetStyle, [IsGtkToolbar, IsInt],
function(toolbar, arg1)
  local retval;
  retval := _GGAP_CALL_METH(toolbar, "set_style", arg1);
  return retval;
end);
InstallMethod(SetTooltips, [IsGtkToolbar, IsBool],
function(toolbar, setting)
  local retval;
  retval := _GGAP_CALL_METH(toolbar, "set_tooltips", setting);
  return retval;
end);
InstallMethod(UnsetIconSize, [IsGtkToolbar],
function(toolbar)
  local retval;
  retval := _GGAP_CALL_METH(toolbar, "unset_icon_size");
  return retval;
end);
InstallMethod(UnsetStyle, [IsGtkToolbar],
function(toolbar)
  local retval;
  retval := _GGAP_CALL_METH(toolbar, "unset_style");
  return retval;
end);
InstallMethod(GtkTreeView, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.TreeView");
  return retval;
end);
InstallMethod(GtkTreeView, [IsGtkTreeModel],
function(model)
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.TreeView", model);
  return retval;
end);
InstallMethod(AppendColumn, [IsGtkTreeView, IsGtkTreeViewColumn],
function(tree_view, tree_view_column)
  local retval;
  retval := _GGAP_CALL_METH(tree_view, "append_column", tree_view_column);
  return retval;
end);
InstallMethod(CollapseAll, [IsGtkTreeView],
function(tree_view)
  local retval;
  retval := _GGAP_CALL_METH(tree_view, "collapse_all");
  return retval;
end);
InstallMethod(CollapseRow, [IsGtkTreeView, IsObject],
function(tree_view, path)
  local retval;
  path := GTK_TREE_PATH_G2P(path);
  retval := _GGAP_CALL_METH(tree_view, "collapse_row", path);
  return retval;
end);
InstallMethod(ColumnsAutosize, [IsGtkTreeView],
function(tree_view)
  local retval;
  retval := _GGAP_CALL_METH(tree_view, "columns_autosize");
  return retval;
end);
InstallMethod(ExpandAll, [IsGtkTreeView],
function(tree_view)
  local retval;
  retval := _GGAP_CALL_METH(tree_view, "expand_all");
  return retval;
end);
InstallMethod(ExpandRow, [IsGtkTreeView, IsObject, IsBool],
function(tree_view, path, open_all)
  local retval;
  path := GTK_TREE_PATH_G2P(path);
  retval := _GGAP_CALL_METH(tree_view, "expand_row", path, open_all);
  return retval;
end);
InstallMethod(ExpandToPath, [IsGtkTreeView, IsObject],
function(tree_view, path)
  local retval;
  path := GTK_TREE_PATH_G2P(path);
  retval := _GGAP_CALL_METH(tree_view, "expand_to_path", path);
  return retval;
end);
InstallMethod(GetBackgroundArea, [IsGtkTreeView, IsObject, IsGtkTreeViewColumn],
function(tree_view, path, tree_view_column)
  local retval;
  path := GTK_TREE_PATH_G2P(path);
  retval := _GGAP_CALL_METH(tree_view, "get_background_area", path, tree_view_column);
  return retval;
end);
InstallMethod(GetBinWindow, [IsGtkTreeView],
function(tree_view)
  local retval;
  retval := _GGAP_CALL_METH(tree_view, "get_bin_window");
  return retval;
end);
InstallMethod(GetCellArea, [IsGtkTreeView, IsObject, IsGtkTreeViewColumn],
function(tree_view, path, tree_view_column)
  local retval;
  path := GTK_TREE_PATH_G2P(path);
  retval := _GGAP_CALL_METH(tree_view, "get_cell_area", path, tree_view_column);
  return retval;
end);
InstallMethod(GetColumn, [IsGtkTreeView, IsInt],
function(tree_view, arg1)
  local retval;
  retval := _GGAP_CALL_METH(tree_view, "get_column", arg1);
  return retval;
end);
InstallMethod(GetColumns, [IsGtkTreeView],
function(tree_view)
  local retval;
  retval := _GGAP_CALL_METH(tree_view, "get_columns");
  return retval;
end);
InstallMethod(GetCursor, [IsGtkTreeView],
function(tree_view)
  local retval;
  retval := _GGAP_CALL_METH(tree_view, "get_cursor");
  return [GTK_TREE_PATH_P2G(retval[1]), retval[2]];
end);
InstallMethod(GetEnableSearch, [IsGtkTreeView],
function(tree_view)
  local retval;
  retval := _GGAP_CALL_METH(tree_view, "get_enable_search");
  return retval;
end);
InstallMethod(GetExpanderColumn, [IsGtkTreeView],
function(tree_view)
  local retval;
  retval := _GGAP_CALL_METH(tree_view, "get_expander_column");
  return retval;
end);
InstallMethod(GetFixedHeightMode, [IsGtkTreeView],
function(tree_view)
  local retval;
  retval := _GGAP_CALL_METH(tree_view, "get_fixed_height_mode");
  return retval;
end);
InstallMethod(GetHadjustment, [IsGtkTreeView],
function(tree_view)
  local retval;
  retval := _GGAP_CALL_METH(tree_view, "get_hadjustment");
  return retval;
end);
InstallMethod(GetHeadersVisible, [IsGtkTreeView],
function(tree_view)
  local retval;
  retval := _GGAP_CALL_METH(tree_view, "get_headers_visible");
  return retval;
end);
InstallMethod(GetHoverExpand, [IsGtkTreeView],
function(tree_view)
  local retval;
  retval := _GGAP_CALL_METH(tree_view, "get_hover_expand");
  return retval;
end);
InstallMethod(GetHoverSelection, [IsGtkTreeView],
function(tree_view)
  local retval;
  retval := _GGAP_CALL_METH(tree_view, "get_hover_selection");
  return retval;
end);
InstallMethod(GetModel, [IsGtkTreeView],
function(tree_view)
  local retval;
  retval := _GGAP_CALL_METH(tree_view, "get_model");
  return retval;
end);
InstallMethod(GetReorderable, [IsGtkTreeView],
function(tree_view)
  local retval;
  retval := _GGAP_CALL_METH(tree_view, "get_reorderable");
  return retval;
end);
InstallMethod(GetRulesHint, [IsGtkTreeView],
function(tree_view)
  local retval;
  retval := _GGAP_CALL_METH(tree_view, "get_rules_hint");
  return retval;
end);
InstallMethod(GetSearchColumn, [IsGtkTreeView],
function(tree_view)
  local retval;
  retval := _GGAP_CALL_METH(tree_view, "get_search_column");
  return retval;
end);
InstallMethod(GetSelection, [IsGtkTreeView],
function(tree_view)
  local retval;
  retval := _GGAP_CALL_METH(tree_view, "get_selection");
  return retval;
end);
InstallMethod(GetVadjustment, [IsGtkTreeView],
function(tree_view)
  local retval;
  retval := _GGAP_CALL_METH(tree_view, "get_vadjustment");
  return retval;
end);
InstallMethod(GetVisibleRect, [IsGtkTreeView],
function(tree_view)
  local retval;
  retval := _GGAP_CALL_METH(tree_view, "get_visible_rect");
  return retval;
end);
InstallMethod(InsertColumn, [IsGtkTreeView, IsGtkTreeViewColumn, IsInt],
function(tree_view, tree_view_column, arg2)
  local retval;
  retval := _GGAP_CALL_METH(tree_view, "insert_column", tree_view_column, arg2);
  return retval;
end);
InstallMethod(MoveColumnAfter, [IsGtkTreeView, IsGtkTreeViewColumn, IsGtkTreeViewColumn],
function(tree_view, column, base_column)
  local retval;
  retval := _GGAP_CALL_METH(tree_view, "move_column_after", column, base_column);
  return retval;
end);
InstallMethod(RemoveColumn, [IsGtkTreeView, IsGtkTreeViewColumn],
function(tree_view, tree_view_column)
  local retval;
  retval := _GGAP_CALL_METH(tree_view, "remove_column", tree_view_column);
  return retval;
end);
InstallMethod(RowActivated, [IsGtkTreeView, IsObject, IsGtkTreeViewColumn],
function(tree_view, path, tree_view_column)
  local retval;
  path := GTK_TREE_PATH_G2P(path);
  retval := _GGAP_CALL_METH(tree_view, "row_activated", path, tree_view_column);
  return retval;
end);
InstallMethod(RowExpanded, [IsGtkTreeView, IsObject],
function(tree_view, path)
  local retval;
  path := GTK_TREE_PATH_G2P(path);
  retval := _GGAP_CALL_METH(tree_view, "row_expanded", path);
  return retval;
end);
InstallMethod(ScrollToCell, [IsGtkTreeView, IsObject],
function(tree_view, path)
  local retval;
  path := GTK_TREE_PATH_G2P(path);
  retval := _GGAP_CALL_METH(tree_view, "scroll_to_cell", path);
  return retval;
end);
InstallMethod(ScrollToCell, [IsGtkTreeView, IsObject, IsGtkTreeViewColumn],
function(tree_view, path, tree_view_column)
  local retval;
  path := GTK_TREE_PATH_G2P(path);
  retval := _GGAP_CALL_METH(tree_view, "scroll_to_cell", path, tree_view_column);
  return retval;
end);
InstallMethod(ScrollToCell, [IsGtkTreeView, IsObject, IsGtkTreeViewColumn, IsBool],
function(tree_view, path, tree_view_column, use_align)
  local retval;
  path := GTK_TREE_PATH_G2P(path);
  retval := _GGAP_CALL_METH(tree_view, "scroll_to_cell", path, tree_view_column, use_align);
  return retval;
end);
InstallMethod(ScrollToCell, [IsGtkTreeView, IsObject, IsGtkTreeViewColumn, IsBool, IsRat],
function(tree_view, path, tree_view_column, use_align, row_align)
  local retval;
  path := GTK_TREE_PATH_G2P(path);
  retval := _GGAP_CALL_METH(tree_view, "scroll_to_cell", path, tree_view_column, use_align, row_align);
  return retval;
end);
InstallMethod(ScrollToCell, [IsGtkTreeView, IsObject, IsGtkTreeViewColumn, IsBool, IsRat, IsRat],
function(tree_view, path, tree_view_column, use_align, row_align, col_align)
  local retval;
  path := GTK_TREE_PATH_G2P(path);
  retval := _GGAP_CALL_METH(tree_view, "scroll_to_cell", path, tree_view_column, use_align, row_align, col_align);
  return retval;
end);
InstallMethod(ScrollToPoint, [IsGtkTreeView, IsInt, IsInt],
function(tree_view, arg1, arg2)
  local retval;
  retval := _GGAP_CALL_METH(tree_view, "scroll_to_point", arg1, arg2);
  return retval;
end);
InstallMethod(SetCursor, [IsGtkTreeView, IsObject],
function(tree_view, path)
  local retval;
  path := GTK_TREE_PATH_G2P(path);
  retval := _GGAP_CALL_METH(tree_view, "set_cursor", path);
  return retval;
end);
InstallMethod(SetCursor, [IsGtkTreeView, IsObject, IsGtkTreeViewColumn],
function(tree_view, path, focus_column)
  local retval;
  path := GTK_TREE_PATH_G2P(path);
  retval := _GGAP_CALL_METH(tree_view, "set_cursor", path, focus_column);
  return retval;
end);
InstallMethod(SetCursor, [IsGtkTreeView, IsObject, IsGtkTreeViewColumn, IsBool],
function(tree_view, path, focus_column, start_editing)
  local retval;
  path := GTK_TREE_PATH_G2P(path);
  retval := _GGAP_CALL_METH(tree_view, "set_cursor", path, focus_column, start_editing);
  return retval;
end);
InstallMethod(SetCursorOnCell, [IsGtkTreeView, IsObject],
function(tree_view, path)
  local retval;
  path := GTK_TREE_PATH_G2P(path);
  retval := _GGAP_CALL_METH(tree_view, "set_cursor_on_cell", path);
  return retval;
end);
InstallMethod(SetCursorOnCell, [IsGtkTreeView, IsObject, IsGtkTreeViewColumn],
function(tree_view, path, focus_column)
  local retval;
  path := GTK_TREE_PATH_G2P(path);
  retval := _GGAP_CALL_METH(tree_view, "set_cursor_on_cell", path, focus_column);
  return retval;
end);
InstallMethod(SetCursorOnCell, [IsGtkTreeView, IsObject, IsGtkTreeViewColumn, IsGtkCellRenderer],
function(tree_view, path, focus_column, focus_cell)
  local retval;
  path := GTK_TREE_PATH_G2P(path);
  retval := _GGAP_CALL_METH(tree_view, "set_cursor_on_cell", path, focus_column, focus_cell);
  return retval;
end);
InstallMethod(SetCursorOnCell, [IsGtkTreeView, IsObject, IsGtkTreeViewColumn, IsGtkCellRenderer, IsBool],
function(tree_view, path, focus_column, focus_cell, start_editing)
  local retval;
  path := GTK_TREE_PATH_G2P(path);
  retval := _GGAP_CALL_METH(tree_view, "set_cursor_on_cell", path, focus_column, focus_cell, start_editing);
  return retval;
end);
InstallMethod(SetEnableSearch, [IsGtkTreeView, IsBool],
function(tree_view, setting)
  local retval;
  retval := _GGAP_CALL_METH(tree_view, "set_enable_search", setting);
  return retval;
end);
InstallMethod(SetExpanderColumn, [IsGtkTreeView, IsGtkTreeViewColumn],
function(tree_view, tree_view_column)
  local retval;
  retval := _GGAP_CALL_METH(tree_view, "set_expander_column", tree_view_column);
  return retval;
end);
InstallMethod(SetFixedHeightMode, [IsGtkTreeView, IsBool],
function(tree_view, setting)
  local retval;
  retval := _GGAP_CALL_METH(tree_view, "set_fixed_height_mode", setting);
  return retval;
end);
InstallMethod(SetHadjustment, [IsGtkTreeView, IsGtkAdjustment],
function(tree_view, adjustment)
  local retval;
  retval := _GGAP_CALL_METH(tree_view, "set_hadjustment", adjustment);
  return retval;
end);
InstallMethod(SetHeadersClickable, [IsGtkTreeView, IsBool],
function(tree_view, setting)
  local retval;
  retval := _GGAP_CALL_METH(tree_view, "set_headers_clickable", setting);
  return retval;
end);
InstallMethod(SetHeadersVisible, [IsGtkTreeView, IsBool],
function(tree_view, setting)
  local retval;
  retval := _GGAP_CALL_METH(tree_view, "set_headers_visible", setting);
  return retval;
end);
InstallMethod(SetHoverExpand, [IsGtkTreeView, IsBool],
function(tree_view, setting)
  local retval;
  retval := _GGAP_CALL_METH(tree_view, "set_hover_expand", setting);
  return retval;
end);
InstallMethod(SetHoverSelection, [IsGtkTreeView, IsBool],
function(tree_view, setting)
  local retval;
  retval := _GGAP_CALL_METH(tree_view, "set_hover_selection", setting);
  return retval;
end);
InstallMethod(SetModel, [IsGtkTreeView, IsGtkTreeModel],
function(tree_view, model)
  local retval;
  retval := _GGAP_CALL_METH(tree_view, "set_model", model);
  return retval;
end);
InstallMethod(SetReorderable, [IsGtkTreeView, IsBool],
function(tree_view, setting)
  local retval;
  retval := _GGAP_CALL_METH(tree_view, "set_reorderable", setting);
  return retval;
end);
InstallMethod(SetRulesHint, [IsGtkTreeView, IsBool],
function(tree_view, setting)
  local retval;
  retval := _GGAP_CALL_METH(tree_view, "set_rules_hint", setting);
  return retval;
end);
InstallMethod(SetSearchColumn, [IsGtkTreeView, IsInt],
function(tree_view, arg1)
  local retval;
  retval := _GGAP_CALL_METH(tree_view, "set_search_column", arg1);
  return retval;
end);
InstallMethod(SetVadjustment, [IsGtkTreeView, IsGtkAdjustment],
function(tree_view, adjustment)
  local retval;
  retval := _GGAP_CALL_METH(tree_view, "set_vadjustment", adjustment);
  return retval;
end);
InstallMethod(TreeToWidgetCoords, [IsGtkTreeView, IsInt, IsInt],
function(tree_view, arg1, arg2)
  local retval;
  retval := _GGAP_CALL_METH(tree_view, "tree_to_widget_coords", arg1, arg2);
  return retval;
end);
InstallMethod(WidgetToTreeCoords, [IsGtkTreeView, IsInt, IsInt],
function(tree_view, arg1, arg2)
  local retval;
  retval := _GGAP_CALL_METH(tree_view, "widget_to_tree_coords", arg1, arg2);
  return retval;
end);
InstallMethod(GtkDrawingArea, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.DrawingArea");
  return retval;
end);
InstallMethod(GtkCurve, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.Curve");
  return retval;
end);
InstallMethod(GtkEntry, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.Entry");
  return retval;
end);
InstallMethod(GtkEntry, [IsInt],
function(maxlen)
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.Entry", maxlen);
  return retval;
end);
InstallMethod(AppendText, [IsGtkEntry, IsString],
function(entry, text)
  local retval;
  retval := _GGAP_CALL_METH(entry, "append_text", text);
  return retval;
end);
InstallMethod(GetActivatesDefault, [IsGtkEntry],
function(entry)
  local retval;
  retval := _GGAP_CALL_METH(entry, "get_activates_default");
  return retval;
end);
InstallMethod(GetAlignment, [IsGtkEntry],
function(entry)
  local retval;
  retval := _GGAP_CALL_METH(entry, "get_alignment");
  return retval;
end);
InstallMethod(GetHasFrame, [IsGtkEntry],
function(entry)
  local retval;
  retval := _GGAP_CALL_METH(entry, "get_has_frame");
  return retval;
end);
InstallMethod(GetInvisibleChar, [IsGtkEntry],
function(entry)
  local retval;
  retval := _GGAP_CALL_METH(entry, "get_invisible_char");
  return retval;
end);
InstallMethod(GetMaxLength, [IsGtkEntry],
function(entry)
  local retval;
  retval := _GGAP_CALL_METH(entry, "get_max_length");
  return retval;
end);
InstallMethod(GetText, [IsGtkEntry],
function(entry)
  local retval;
  retval := _GGAP_CALL_METH(entry, "get_text");
  return retval;
end);
InstallMethod(GetVisibility, [IsGtkEntry],
function(entry)
  local retval;
  retval := _GGAP_CALL_METH(entry, "get_visibility");
  return retval;
end);
InstallMethod(GetWidthChars, [IsGtkEntry],
function(entry)
  local retval;
  retval := _GGAP_CALL_METH(entry, "get_width_chars");
  return retval;
end);
InstallMethod(PrependText, [IsGtkEntry, IsString],
function(entry, text)
  local retval;
  retval := _GGAP_CALL_METH(entry, "prepend_text", text);
  return retval;
end);
InstallMethod(SelectRegion, [IsGtkEntry, IsInt, IsInt],
function(entry, start, end_)
  local retval;
  retval := _GGAP_CALL_METH(entry, "select_region", start, end_);
  return retval;
end);
InstallMethod(SetActivatesDefault, [IsGtkEntry, IsBool],
function(entry, activates_default)
  local retval;
  retval := _GGAP_CALL_METH(entry, "set_activates_default", activates_default);
  return retval;
end);
InstallMethod(SetAlignment, [IsGtkEntry, IsRat],
function(entry, xalign)
  local retval;
  retval := _GGAP_CALL_METH(entry, "set_alignment", xalign);
  return retval;
end);
InstallMethod(SetEditable, [IsGtkEntry, IsBool],
function(entry, editable)
  local retval;
  retval := _GGAP_CALL_METH(entry, "set_editable", editable);
  return retval;
end);
InstallMethod(SetHasFrame, [IsGtkEntry, IsBool],
function(entry, has_frame)
  local retval;
  retval := _GGAP_CALL_METH(entry, "set_has_frame", has_frame);
  return retval;
end);
InstallMethod(SetMaxLength, [IsGtkEntry, IsInt],
function(entry, max_len)
  local retval;
  retval := _GGAP_CALL_METH(entry, "set_max_length", max_len);
  return retval;
end);
InstallMethod(SetPosition, [IsGtkEntry, IsInt],
function(entry, position)
  local retval;
  retval := _GGAP_CALL_METH(entry, "set_position", position);
  return retval;
end);
InstallMethod(SetText, [IsGtkEntry, IsString],
function(entry, text)
  local retval;
  retval := _GGAP_CALL_METH(entry, "set_text", text);
  return retval;
end);
InstallMethod(SetVisibility, [IsGtkEntry, IsBool],
function(entry, visible)
  local retval;
  retval := _GGAP_CALL_METH(entry, "set_visibility", visible);
  return retval;
end);
InstallMethod(SetWidthChars, [IsGtkEntry, IsInt],
function(entry, n_chars)
  local retval;
  retval := _GGAP_CALL_METH(entry, "set_width_chars", n_chars);
  return retval;
end);
InstallMethod(GtkSpinButton, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.SpinButton");
  return retval;
end);
InstallMethod(GtkArrow, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.Arrow");
  return retval;
end);
InstallMethod(GtkLabel, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.Label");
  return retval;
end);
InstallMethod(GtkLabel, [IsString],
function(text)
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.Label", text);
  return retval;
end);
InstallMethod(GtkAccelLabel, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.AccelLabel");
  return retval;
end);
InstallMethod(GtkProgress, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.Progress");
  return retval;
end);
InstallMethod(GtkProgressBar, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.ProgressBar");
  return retval;
end);
InstallMethod(GtkRange, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.Range");
  return retval;
end);
InstallMethod(GtkScale, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.Scale");
  return retval;
end);
InstallMethod(GtkHScale, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.HScale");
  return retval;
end);
InstallMethod(GtkVScale, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.VScale");
  return retval;
end);
InstallMethod(GtkScrollbar, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.Scrollbar");
  return retval;
end);
InstallMethod(GtkHScrollbar, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.HScrollbar");
  return retval;
end);
InstallMethod(GtkVScrollbar, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.VScrollbar");
  return retval;
end);
InstallMethod(GtkRuler, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.Ruler");
  return retval;
end);
InstallMethod(GtkHRuler, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.HRuler");
  return retval;
end);
InstallMethod(GtkVRuler, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.VRuler");
  return retval;
end);
InstallMethod(GtkSeparator, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.Separator");
  return retval;
end);
InstallMethod(GtkHSeparator, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.HSeparator");
  return retval;
end);
InstallMethod(GtkVSeparator, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.VSeparator");
  return retval;
end);
InstallMethod(GtkTextBuffer, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.TextBuffer");
  return retval;
end);
InstallMethod(GtkTooltips, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.Tooltips");
  return retval;
end);
InstallMethod(CountSelectedRows, [IsGtkTreeSelection],
function(selection)
  local retval;
  retval := _GGAP_CALL_METH(selection, "count_selected_rows");
  return retval;
end);
InstallMethod(GetMode, [IsGtkTreeSelection],
function(selection)
  local retval;
  retval := _GGAP_CALL_METH(selection, "get_mode");
  return retval;
end);
InstallMethod(GetSelected, [IsGtkTreeSelection],
function(selection)
  local retval;
  retval := _GGAP_CALL_FUNC("gap.tree_selection_get_selected", selection);
  return GTK_TREE_PATH_P2G(retval[2]);
end);
InstallMethod(GetSelectedRows, [IsGtkTreeSelection],
function(selection)
  local retval;
  retval := _GGAP_CALL_FUNC("gap.tree_selection_get_selected_rows", selection);
  return List(retval[2], GTK_TREE_PATH_P2G);
end);
InstallMethod(GetTreeView, [IsGtkTreeSelection],
function(selection)
  local retval;
  retval := _GGAP_CALL_METH(selection, "get_tree_view");
  return retval;
end);
InstallMethod(RowIsSelected, [IsGtkTreeSelection, IsObject],
function(selection, path)
  local retval;
  path := GTK_TREE_PATH_G2P(path);
  retval := _GGAP_CALL_METH(selection, "path_is_selected", path);
  return retval;
end);
InstallMethod(SelectAll, [IsGtkTreeSelection],
function(selection)
  local retval;
  retval := _GGAP_CALL_METH(selection, "select_all");
  return retval;
end);
InstallMethod(SelectRange, [IsGtkTreeSelection, IsObject, IsObject],
function(selection, start, end_)
  local retval;
  start := GTK_TREE_PATH_G2P(start);
  end_ := GTK_TREE_PATH_G2P(end_);
  retval := _GGAP_CALL_METH(selection, "select_range", start, end_);
  return retval;
end);
InstallMethod(SelectRow, [IsGtkTreeSelection, IsObject],
function(selection, path)
  local retval;
  path := GTK_TREE_PATH_G2P(path);
  retval := _GGAP_CALL_METH(selection, "select_path", path);
  return retval;
end);
InstallMethod(SetMode, [IsGtkTreeSelection, IsInt],
function(selection, arg1)
  local retval;
  retval := _GGAP_CALL_METH(selection, "set_mode", arg1);
  return retval;
end);
InstallMethod(UnselectAll, [IsGtkTreeSelection],
function(selection)
  local retval;
  retval := _GGAP_CALL_METH(selection, "unselect_all");
  return retval;
end);
InstallMethod(UnselectRange, [IsGtkTreeSelection, IsObject, IsObject],
function(selection, start, end_)
  local retval;
  start := GTK_TREE_PATH_G2P(start);
  end_ := GTK_TREE_PATH_G2P(end_);
  retval := _GGAP_CALL_METH(selection, "unselect_range", start, end_);
  return retval;
end);
InstallMethod(UnselectRow, [IsGtkTreeSelection, IsObject],
function(selection, path)
  local retval;
  path := GTK_TREE_PATH_G2P(path);
  retval := _GGAP_CALL_METH(selection, "unselect_path", path);
  return retval;
end);
InstallMethod(GtkTreeViewColumn, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.TreeViewColumn");
  return retval;
end);
InstallMethod(GtkTreeViewColumn, [IsString],
function(title)
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.TreeViewColumn", title);
  return retval;
end);
InstallMethod(GtkTreeViewColumn, [IsString, IsGtkCellRenderer],
function(title, cell)
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.TreeViewColumn", title, cell);
  return retval;
end);
InstallMethod(CellIsVisible, [IsGtkTreeViewColumn],
function(tree_view_column)
  local retval;
  retval := _GGAP_CALL_METH(tree_view_column, "cell_is_visible");
  return retval;
end);
InstallMethod(Clicked, [IsGtkTreeViewColumn],
function(tree_view_column)
  local retval;
  retval := _GGAP_CALL_METH(tree_view_column, "clicked");
  return retval;
end);
InstallMethod(FocusCell, [IsGtkTreeViewColumn, IsGtkCellRenderer],
function(tree_view_column, cell)
  local retval;
  retval := _GGAP_CALL_METH(tree_view_column, "focus_cell", cell);
  return retval;
end);
InstallMethod(GetAlignment, [IsGtkTreeViewColumn],
function(tree_view_column)
  local retval;
  retval := _GGAP_CALL_METH(tree_view_column, "get_alignment");
  return retval;
end);
InstallMethod(GetCellRenderers, [IsGtkTreeViewColumn],
function(tree_view_column)
  local retval;
  retval := _GGAP_CALL_METH(tree_view_column, "get_cell_renderers");
  return retval;
end);
InstallMethod(GetClickable, [IsGtkTreeViewColumn],
function(tree_view_column)
  local retval;
  retval := _GGAP_CALL_METH(tree_view_column, "get_clickable");
  return retval;
end);
InstallMethod(GetExpand, [IsGtkTreeViewColumn],
function(tree_view_column)
  local retval;
  retval := _GGAP_CALL_METH(tree_view_column, "get_expand");
  return retval;
end);
InstallMethod(GetFixedWidth, [IsGtkTreeViewColumn],
function(tree_view_column)
  local retval;
  retval := _GGAP_CALL_METH(tree_view_column, "get_fixed_width");
  return retval;
end);
InstallMethod(GetMaxWidth, [IsGtkTreeViewColumn],
function(tree_view_column)
  local retval;
  retval := _GGAP_CALL_METH(tree_view_column, "get_max_width");
  return retval;
end);
InstallMethod(GetMinWidth, [IsGtkTreeViewColumn],
function(tree_view_column)
  local retval;
  retval := _GGAP_CALL_METH(tree_view_column, "get_min_width");
  return retval;
end);
InstallMethod(GetReorderable, [IsGtkTreeViewColumn],
function(tree_view_column)
  local retval;
  retval := _GGAP_CALL_METH(tree_view_column, "get_reorderable");
  return retval;
end);
InstallMethod(GetResizable, [IsGtkTreeViewColumn],
function(tree_view_column)
  local retval;
  retval := _GGAP_CALL_METH(tree_view_column, "get_resizable");
  return retval;
end);
InstallMethod(GetSizing, [IsGtkTreeViewColumn],
function(tree_view_column)
  local retval;
  retval := _GGAP_CALL_METH(tree_view_column, "get_sizing");
  return retval;
end);
InstallMethod(GetSortColumnId, [IsGtkTreeViewColumn],
function(tree_view_column)
  local retval;
  retval := _GGAP_CALL_METH(tree_view_column, "get_sort_column_id");
  return retval;
end);
InstallMethod(GetSortIndicator, [IsGtkTreeViewColumn],
function(tree_view_column)
  local retval;
  retval := _GGAP_CALL_METH(tree_view_column, "get_sort_indicator");
  return retval;
end);
InstallMethod(GetSortOrder, [IsGtkTreeViewColumn],
function(tree_view_column)
  local retval;
  retval := _GGAP_CALL_METH(tree_view_column, "get_sort_order");
  return retval;
end);
InstallMethod(GetSpacing, [IsGtkTreeViewColumn],
function(tree_view_column)
  local retval;
  retval := _GGAP_CALL_METH(tree_view_column, "get_spacing");
  return retval;
end);
InstallMethod(GetTitle, [IsGtkTreeViewColumn],
function(tree_view_column)
  local retval;
  retval := _GGAP_CALL_METH(tree_view_column, "get_title");
  return retval;
end);
InstallMethod(GetVisible, [IsGtkTreeViewColumn],
function(tree_view_column)
  local retval;
  retval := _GGAP_CALL_METH(tree_view_column, "get_visible");
  return retval;
end);
InstallMethod(GetWidget, [IsGtkTreeViewColumn],
function(tree_view_column)
  local retval;
  retval := _GGAP_CALL_METH(tree_view_column, "get_widget");
  return retval;
end);
InstallMethod(GetWidth, [IsGtkTreeViewColumn],
function(tree_view_column)
  local retval;
  retval := _GGAP_CALL_METH(tree_view_column, "get_width");
  return retval;
end);
InstallMethod(QueueResize, [IsGtkTreeViewColumn],
function(tree_view_column)
  local retval;
  retval := _GGAP_CALL_METH(tree_view_column, "queue_resize");
  return retval;
end);
InstallMethod(SetAlignment, [IsGtkTreeViewColumn, IsRat],
function(tree_view_column, align)
  local retval;
  retval := _GGAP_CALL_METH(tree_view_column, "set_alignment", align);
  return retval;
end);
InstallMethod(SetClickable, [IsGtkTreeViewColumn, IsBool],
function(tree_view_column, setting)
  local retval;
  retval := _GGAP_CALL_METH(tree_view_column, "set_clickable", setting);
  return retval;
end);
InstallMethod(SetExpand, [IsGtkTreeViewColumn, IsBool],
function(tree_view_column, setting)
  local retval;
  retval := _GGAP_CALL_METH(tree_view_column, "set_expand", setting);
  return retval;
end);
InstallMethod(SetFixedWidth, [IsGtkTreeViewColumn, IsInt],
function(tree_view_column, width)
  local retval;
  retval := _GGAP_CALL_METH(tree_view_column, "set_fixed_width", width);
  return retval;
end);
InstallMethod(SetMaxWidth, [IsGtkTreeViewColumn, IsInt],
function(tree_view_column, max_width)
  local retval;
  retval := _GGAP_CALL_METH(tree_view_column, "set_max_width", max_width);
  return retval;
end);
InstallMethod(SetMinWidth, [IsGtkTreeViewColumn, IsInt],
function(tree_view_column, min_width)
  local retval;
  retval := _GGAP_CALL_METH(tree_view_column, "set_min_width", min_width);
  return retval;
end);
InstallMethod(SetReorderable, [IsGtkTreeViewColumn, IsBool],
function(tree_view_column, setting)
  local retval;
  retval := _GGAP_CALL_METH(tree_view_column, "set_reorderable", setting);
  return retval;
end);
InstallMethod(SetResizable, [IsGtkTreeViewColumn, IsBool],
function(tree_view_column, resizable)
  local retval;
  retval := _GGAP_CALL_METH(tree_view_column, "set_resizable", resizable);
  return retval;
end);
InstallMethod(SetSizing, [IsGtkTreeViewColumn, IsInt],
function(tree_view_column, mode)
  local retval;
  retval := _GGAP_CALL_METH(tree_view_column, "set_sizing", mode);
  return retval;
end);
InstallMethod(SetSortColumnId, [IsGtkTreeViewColumn, IsInt],
function(tree_view_column, id)
  local retval;
  retval := _GGAP_CALL_METH(tree_view_column, "set_sort_column_id", id);
  return retval;
end);
InstallMethod(SetSortIndicator, [IsGtkTreeViewColumn, IsBool],
function(tree_view_column, show)
  local retval;
  retval := _GGAP_CALL_METH(tree_view_column, "set_sort_indicator", show);
  return retval;
end);
InstallMethod(SetSortOrder, [IsGtkTreeViewColumn, IsInt],
function(tree_view_column, order)
  local retval;
  retval := _GGAP_CALL_METH(tree_view_column, "set_sort_order", order);
  return retval;
end);
InstallMethod(SetSpacing, [IsGtkTreeViewColumn, IsInt],
function(tree_view_column, spasing)
  local retval;
  retval := _GGAP_CALL_METH(tree_view_column, "set_spacing", spasing);
  return retval;
end);
InstallMethod(SetTitle, [IsGtkTreeViewColumn, IsString],
function(tree_view_column, title)
  local retval;
  retval := _GGAP_CALL_METH(tree_view_column, "set_title", title);
  return retval;
end);
InstallMethod(SetVisible, [IsGtkTreeViewColumn, IsBool],
function(tree_view_column, visible)
  local retval;
  retval := _GGAP_CALL_METH(tree_view_column, "set_visible", visible);
  return retval;
end);
InstallMethod(SetWidget, [IsGtkTreeViewColumn, IsGtkWidget],
function(tree_view_column, widget)
  local retval;
  retval := _GGAP_CALL_METH(tree_view_column, "set_widget", widget);
  return retval;
end);
InstallMethod(GetRoot, [IsGladeXML],
function(xml)
  local retval;
  retval := _GGAP_CALL_METH(xml, "get_root");
  return retval;
end);
InstallMethod(GetWidget, [IsGladeXML, IsString],
function(xml, name)
  local retval;
  retval := _GGAP_CALL_METH(xml, "get_widget", name);
  return retval;
end);
InstallMethod(WindowListToplevels, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.window_list_toplevels");
  return retval;
end);
InstallMethod(WindowSetDefaultIconFromFile, [IsString],
function(filename)
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.window_set_default_icon_from_file", filename);
  return retval;
end);
InstallMethod(WindowSetDefaultIconName, [IsString],
function(icon_name)
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.window_set_default_icon_name", icon_name);
  return retval;
end);
InstallMethod(ScreenGetDefault, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.gdk.screen_get_default");
  return retval;
end);
InstallMethod(DisplayGetDefault, [],
function()
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.gdk.display_get_default");
  return retval;
end);
InstallMethod(GdkPixbuf, [IsString],
function(filename)
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.gdk.pixbuf_new_from_file", filename);
  return retval;
end);
InstallMethod(GdkPixbuf, [IsString, IsInt, IsInt],
function(filename, width, height)
  local retval;
  retval := _GGAP_CALL_FUNC("gtk.gdk.pixbuf_new_from_file", filename, width, height);
  return retval;
end);

InstallGlobalFunction(_GGAP_REGISTER_WIDGETS,
function()
_GGAP_REGISTER_TYPE("GdkPixbuf", IsGdkPixbuf);
_GGAP_REGISTER_TYPE("GtkCellLayout", IsGtkCellLayout);
_GGAP_REGISTER_TYPE("GtkEditable", IsGtkEditable);
_GGAP_REGISTER_TYPE("GtkFileFilter", IsGtkFileFilter);
_GGAP_REGISTER_TYPE("GtkFileChooser", IsGtkFileChooser);
_GGAP_REGISTER_TYPE("GtkTreeModel", IsGtkTreeModel);
_GGAP_REGISTER_TYPE("GtkTreeSortable", IsGtkTreeSortable);
_GGAP_REGISTER_TYPE("GdkDisplay", IsGdkDisplay);
_GGAP_REGISTER_TYPE("GdkScreen", IsGdkScreen);
_GGAP_REGISTER_TYPE("GdkWindow", IsGdkWindow);
_GGAP_REGISTER_TYPE("GtkListStore", IsGtkListStore);
_GGAP_REGISTER_TYPE("GtkObject", IsGtkObject);
_GGAP_REGISTER_TYPE("GtkAdjustment", IsGtkAdjustment);
_GGAP_REGISTER_TYPE("GtkCellRenderer", IsGtkCellRenderer);
_GGAP_REGISTER_TYPE("GtkCellRendererPixbuf", IsGtkCellRendererPixbuf);
_GGAP_REGISTER_TYPE("GtkCellRendererProgress", IsGtkCellRendererProgress);
_GGAP_REGISTER_TYPE("GtkCellRendererText", IsGtkCellRendererText);
_GGAP_REGISTER_TYPE("GtkCellRendererCombo", IsGtkCellRendererCombo);
_GGAP_REGISTER_TYPE("GtkCellRendererToggle", IsGtkCellRendererToggle);
_GGAP_REGISTER_TYPE("GtkWidget", IsGtkWidget);
_GGAP_REGISTER_TYPE("GtkCalendar", IsGtkCalendar);
_GGAP_REGISTER_TYPE("GtkContainer", IsGtkContainer);
_GGAP_REGISTER_TYPE("GtkBin", IsGtkBin);
_GGAP_REGISTER_TYPE("GtkAlignment", IsGtkAlignment);
_GGAP_REGISTER_TYPE("GtkButton", IsGtkButton);
_GGAP_REGISTER_TYPE("GtkColorButton", IsGtkColorButton);
_GGAP_REGISTER_TYPE("GtkFontButton", IsGtkFontButton);
_GGAP_REGISTER_TYPE("GtkToggleButton", IsGtkToggleButton);
_GGAP_REGISTER_TYPE("GtkCheckButton", IsGtkCheckButton);
_GGAP_REGISTER_TYPE("GtkRadioButton", IsGtkRadioButton);
_GGAP_REGISTER_TYPE("GtkComboBox", IsGtkComboBox);
_GGAP_REGISTER_TYPE("GtkComboBoxEntry", IsGtkComboBoxEntry);
_GGAP_REGISTER_TYPE("GtkEventBox", IsGtkEventBox);
_GGAP_REGISTER_TYPE("GtkExpander", IsGtkExpander);
_GGAP_REGISTER_TYPE("GtkFrame", IsGtkFrame);
_GGAP_REGISTER_TYPE("GtkAspectFrame", IsGtkAspectFrame);
_GGAP_REGISTER_TYPE("GtkHandleBox", IsGtkHandleBox);
_GGAP_REGISTER_TYPE("GtkItem", IsGtkItem);
_GGAP_REGISTER_TYPE("GtkMenuItem", IsGtkMenuItem);
_GGAP_REGISTER_TYPE("GtkCheckMenuItem", IsGtkCheckMenuItem);
_GGAP_REGISTER_TYPE("GtkRadioMenuItem", IsGtkRadioMenuItem);
_GGAP_REGISTER_TYPE("GtkImageMenuItem", IsGtkImageMenuItem);
_GGAP_REGISTER_TYPE("GtkSeparatorMenuItem", IsGtkSeparatorMenuItem);
_GGAP_REGISTER_TYPE("GtkTearoffMenuItem", IsGtkTearoffMenuItem);
_GGAP_REGISTER_TYPE("GtkPlug", IsGtkPlug);
_GGAP_REGISTER_TYPE("GtkScrolledWindow", IsGtkScrolledWindow);
_GGAP_REGISTER_TYPE("GtkToolItem", IsGtkToolItem);
_GGAP_REGISTER_TYPE("GtkSeparatorToolItem", IsGtkSeparatorToolItem);
_GGAP_REGISTER_TYPE("GtkToolButton", IsGtkToolButton);
_GGAP_REGISTER_TYPE("GtkMenuToolButton", IsGtkMenuToolButton);
_GGAP_REGISTER_TYPE("GtkToggleToolButton", IsGtkToggleToolButton);
_GGAP_REGISTER_TYPE("GtkRadioToolButton", IsGtkRadioToolButton);
_GGAP_REGISTER_TYPE("GtkViewport", IsGtkViewport);
_GGAP_REGISTER_TYPE("GtkWindow", IsGtkWindow);
_GGAP_REGISTER_TYPE("GtkDialog", IsGtkDialog);
_GGAP_REGISTER_TYPE("GtkAboutDialog", IsGtkAboutDialog);
_GGAP_REGISTER_TYPE("GtkColorSelectionDialog", IsGtkColorSelectionDialog);
_GGAP_REGISTER_TYPE("GtkFileChooserDialog", IsGtkFileChooserDialog);
_GGAP_REGISTER_TYPE("GtkFontSelectionDialog", IsGtkFontSelectionDialog);
_GGAP_REGISTER_TYPE("GtkMessageDialog", IsGtkMessageDialog);
_GGAP_REGISTER_TYPE("GtkBox", IsGtkBox);
_GGAP_REGISTER_TYPE("GtkButtonBox", IsGtkButtonBox);
_GGAP_REGISTER_TYPE("GtkHButtonBox", IsGtkHButtonBox);
_GGAP_REGISTER_TYPE("GtkVButtonBox", IsGtkVButtonBox);
_GGAP_REGISTER_TYPE("GtkHBox", IsGtkHBox);
_GGAP_REGISTER_TYPE("GtkFileChooserButton", IsGtkFileChooserButton);
_GGAP_REGISTER_TYPE("GtkStatusbar", IsGtkStatusbar);
_GGAP_REGISTER_TYPE("GtkVBox", IsGtkVBox);
_GGAP_REGISTER_TYPE("GtkColorSelection", IsGtkColorSelection);
_GGAP_REGISTER_TYPE("GtkFileChooserWidget", IsGtkFileChooserWidget);
_GGAP_REGISTER_TYPE("GtkFontSelection", IsGtkFontSelection);
_GGAP_REGISTER_TYPE("GtkFixed", IsGtkFixed);
_GGAP_REGISTER_TYPE("GtkIconView", IsGtkIconView);
_GGAP_REGISTER_TYPE("GtkLayout", IsGtkLayout);
_GGAP_REGISTER_TYPE("GtkMenuShell", IsGtkMenuShell);
_GGAP_REGISTER_TYPE("GtkMenu", IsGtkMenu);
_GGAP_REGISTER_TYPE("GtkMenuBar", IsGtkMenuBar);
_GGAP_REGISTER_TYPE("GtkNotebook", IsGtkNotebook);
_GGAP_REGISTER_TYPE("GtkPaned", IsGtkPaned);
_GGAP_REGISTER_TYPE("GtkHPaned", IsGtkHPaned);
_GGAP_REGISTER_TYPE("GtkVPaned", IsGtkVPaned);
_GGAP_REGISTER_TYPE("GtkSocket", IsGtkSocket);
_GGAP_REGISTER_TYPE("GtkTable", IsGtkTable);
_GGAP_REGISTER_TYPE("GtkTextView", IsGtkTextView);
_GGAP_REGISTER_TYPE("MooTextView", IsMooTextView);
_GGAP_REGISTER_TYPE("GtkToolbar", IsGtkToolbar);
_GGAP_REGISTER_TYPE("GtkTreeView", IsGtkTreeView);
_GGAP_REGISTER_TYPE("GtkDrawingArea", IsGtkDrawingArea);
_GGAP_REGISTER_TYPE("GtkCurve", IsGtkCurve);
_GGAP_REGISTER_TYPE("GtkEntry", IsGtkEntry);
_GGAP_REGISTER_TYPE("GtkSpinButton", IsGtkSpinButton);
_GGAP_REGISTER_TYPE("GtkMisc", IsGtkMisc);
_GGAP_REGISTER_TYPE("GtkArrow", IsGtkArrow);
_GGAP_REGISTER_TYPE("GtkLabel", IsGtkLabel);
_GGAP_REGISTER_TYPE("GtkAccelLabel", IsGtkAccelLabel);
_GGAP_REGISTER_TYPE("GtkProgress", IsGtkProgress);
_GGAP_REGISTER_TYPE("GtkProgressBar", IsGtkProgressBar);
_GGAP_REGISTER_TYPE("GtkRange", IsGtkRange);
_GGAP_REGISTER_TYPE("GtkScale", IsGtkScale);
_GGAP_REGISTER_TYPE("GtkHScale", IsGtkHScale);
_GGAP_REGISTER_TYPE("GtkVScale", IsGtkVScale);
_GGAP_REGISTER_TYPE("GtkScrollbar", IsGtkScrollbar);
_GGAP_REGISTER_TYPE("GtkHScrollbar", IsGtkHScrollbar);
_GGAP_REGISTER_TYPE("GtkVScrollbar", IsGtkVScrollbar);
_GGAP_REGISTER_TYPE("GtkRuler", IsGtkRuler);
_GGAP_REGISTER_TYPE("GtkHRuler", IsGtkHRuler);
_GGAP_REGISTER_TYPE("GtkVRuler", IsGtkVRuler);
_GGAP_REGISTER_TYPE("GtkSeparator", IsGtkSeparator);
_GGAP_REGISTER_TYPE("GtkHSeparator", IsGtkHSeparator);
_GGAP_REGISTER_TYPE("GtkVSeparator", IsGtkVSeparator);
_GGAP_REGISTER_TYPE("GtkTextBuffer", IsGtkTextBuffer);
_GGAP_REGISTER_TYPE("GtkTooltips", IsGtkTooltips);
_GGAP_REGISTER_TYPE("GtkTreeSelection", IsGtkTreeSelection);
_GGAP_REGISTER_TYPE("GtkTreeStore", IsGtkTreeStore);
_GGAP_REGISTER_TYPE("GtkTreeViewColumn", IsGtkTreeViewColumn);
_GGAP_REGISTER_TYPE("MooGladeXML", IsGladeXML);
end);
